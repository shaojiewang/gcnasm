// generated by gen_set_buf.py
template <typename T/*sizeof(T)==4*/, index_t N, bool disable_inline_asm = false, bool use_dwordx2 = (sizeof(T) == 8)>
struct set_static_array_dword {
    template<index_t value = 0>
    DEVICE void operator()(static_buffer<T, N> & vec, number<value> = number<0>{}) {
        constexpr_for<0, N, 1>{}([&](auto i){
            vec[i] = static_cast<T>(value);
        });
    }
};

// clang-format off
template <typename T> struct set_static_array_dword<T, 4, false/*disable_inline_asm*/, true> {
    template<index_t value = 0>
    DEVICE void operator()(static_buffer<T, 4> & vec, number<value> = number<0>{}) {
        static_assert(sizeof(T) == 8);
        asm volatile(
                "v_pk_mov_b32 %0, %4, %4 op_sel:[0, 1]\n" "v_pk_mov_b32 %1, %4, %4 op_sel:[0, 1]\n" "v_pk_mov_b32 %2, %4, %4 op_sel:[0, 1]\n" "v_pk_mov_b32 %3, %4, %4 op_sel:[0, 1]\n" 
                :
                "=v"(vec[number<0>{}]), "=v"(vec[number<1>{}]), "=v"(vec[number<2>{}]), "=v"(vec[number<3>{}]) 
                : "n"(value) );
    }
};
template <typename T> struct set_static_array_dword<T, 4, false/*disable_inline_asm*/, false> {
    template<index_t value = 0>
    DEVICE void operator()(static_buffer<T, 4> & vec, number<value> = number<0>{}) {
        static_assert(sizeof(T) == 4);
        asm volatile(
                "v_mov_b32 %0, %4\n" "v_mov_b32 %1, %4\n" "v_mov_b32 %2, %4\n" "v_mov_b32 %3, %4\n" 
                :
                "=v"(vec[number<0>{}]), "=v"(vec[number<1>{}]), "=v"(vec[number<2>{}]), "=v"(vec[number<3>{}]) 
                : "n"(value) );
    }
};

template <typename T> struct set_static_array_dword<T, 8, false/*disable_inline_asm*/, true> {
    template<index_t value = 0>
    DEVICE void operator()(static_buffer<T, 8> & vec, number<value> = number<0>{}) {
        static_assert(sizeof(T) == 8);
        asm volatile(
                "v_pk_mov_b32 %0, %8, %8 op_sel:[0, 1]\n" "v_pk_mov_b32 %1, %8, %8 op_sel:[0, 1]\n" "v_pk_mov_b32 %2, %8, %8 op_sel:[0, 1]\n" "v_pk_mov_b32 %3, %8, %8 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %4, %8, %8 op_sel:[0, 1]\n" "v_pk_mov_b32 %5, %8, %8 op_sel:[0, 1]\n" "v_pk_mov_b32 %6, %8, %8 op_sel:[0, 1]\n" "v_pk_mov_b32 %7, %8, %8 op_sel:[0, 1]\n" 
                :
                "=v"(vec[number<0>{}]), "=v"(vec[number<1>{}]), "=v"(vec[number<2>{}]), "=v"(vec[number<3>{}]), 
                "=v"(vec[number<4>{}]), "=v"(vec[number<5>{}]), "=v"(vec[number<6>{}]), "=v"(vec[number<7>{}]) 
                : "n"(value) );
    }
};
template <typename T> struct set_static_array_dword<T, 8, false/*disable_inline_asm*/, false> {
    template<index_t value = 0>
    DEVICE void operator()(static_buffer<T, 8> & vec, number<value> = number<0>{}) {
        static_assert(sizeof(T) == 4);
        asm volatile(
                "v_mov_b32 %0, %8\n" "v_mov_b32 %1, %8\n" "v_mov_b32 %2, %8\n" "v_mov_b32 %3, %8\n" 
                "v_mov_b32 %4, %8\n" "v_mov_b32 %5, %8\n" "v_mov_b32 %6, %8\n" "v_mov_b32 %7, %8\n" 
                :
                "=v"(vec[number<0>{}]), "=v"(vec[number<1>{}]), "=v"(vec[number<2>{}]), "=v"(vec[number<3>{}]), 
                "=v"(vec[number<4>{}]), "=v"(vec[number<5>{}]), "=v"(vec[number<6>{}]), "=v"(vec[number<7>{}]) 
                : "n"(value) );
    }
};

template <typename T> struct set_static_array_dword<T, 16, false/*disable_inline_asm*/, true> {
    template<index_t value = 0>
    DEVICE void operator()(static_buffer<T, 16> & vec, number<value> = number<0>{}) {
        static_assert(sizeof(T) == 8);
        asm volatile(
                "v_pk_mov_b32 %0, %16, %16 op_sel:[0, 1]\n" "v_pk_mov_b32 %1, %16, %16 op_sel:[0, 1]\n" "v_pk_mov_b32 %2, %16, %16 op_sel:[0, 1]\n" "v_pk_mov_b32 %3, %16, %16 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %4, %16, %16 op_sel:[0, 1]\n" "v_pk_mov_b32 %5, %16, %16 op_sel:[0, 1]\n" "v_pk_mov_b32 %6, %16, %16 op_sel:[0, 1]\n" "v_pk_mov_b32 %7, %16, %16 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %8, %16, %16 op_sel:[0, 1]\n" "v_pk_mov_b32 %9, %16, %16 op_sel:[0, 1]\n" "v_pk_mov_b32 %10, %16, %16 op_sel:[0, 1]\n" "v_pk_mov_b32 %11, %16, %16 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %12, %16, %16 op_sel:[0, 1]\n" "v_pk_mov_b32 %13, %16, %16 op_sel:[0, 1]\n" "v_pk_mov_b32 %14, %16, %16 op_sel:[0, 1]\n" "v_pk_mov_b32 %15, %16, %16 op_sel:[0, 1]\n" 
                :
                "=v"(vec[number<0>{}]), "=v"(vec[number<1>{}]), "=v"(vec[number<2>{}]), "=v"(vec[number<3>{}]), 
                "=v"(vec[number<4>{}]), "=v"(vec[number<5>{}]), "=v"(vec[number<6>{}]), "=v"(vec[number<7>{}]), 
                "=v"(vec[number<8>{}]), "=v"(vec[number<9>{}]), "=v"(vec[number<10>{}]), "=v"(vec[number<11>{}]), 
                "=v"(vec[number<12>{}]), "=v"(vec[number<13>{}]), "=v"(vec[number<14>{}]), "=v"(vec[number<15>{}]) 
                : "n"(value) );
    }
};
template <typename T> struct set_static_array_dword<T, 16, false/*disable_inline_asm*/, false> {
    template<index_t value = 0>
    DEVICE void operator()(static_buffer<T, 16> & vec, number<value> = number<0>{}) {
        static_assert(sizeof(T) == 4);
        asm volatile(
                "v_mov_b32 %0, %16\n" "v_mov_b32 %1, %16\n" "v_mov_b32 %2, %16\n" "v_mov_b32 %3, %16\n" 
                "v_mov_b32 %4, %16\n" "v_mov_b32 %5, %16\n" "v_mov_b32 %6, %16\n" "v_mov_b32 %7, %16\n" 
                "v_mov_b32 %8, %16\n" "v_mov_b32 %9, %16\n" "v_mov_b32 %10, %16\n" "v_mov_b32 %11, %16\n" 
                "v_mov_b32 %12, %16\n" "v_mov_b32 %13, %16\n" "v_mov_b32 %14, %16\n" "v_mov_b32 %15, %16\n" 
                :
                "=v"(vec[number<0>{}]), "=v"(vec[number<1>{}]), "=v"(vec[number<2>{}]), "=v"(vec[number<3>{}]), 
                "=v"(vec[number<4>{}]), "=v"(vec[number<5>{}]), "=v"(vec[number<6>{}]), "=v"(vec[number<7>{}]), 
                "=v"(vec[number<8>{}]), "=v"(vec[number<9>{}]), "=v"(vec[number<10>{}]), "=v"(vec[number<11>{}]), 
                "=v"(vec[number<12>{}]), "=v"(vec[number<13>{}]), "=v"(vec[number<14>{}]), "=v"(vec[number<15>{}]) 
                : "n"(value) );
    }
};

template <typename T> struct set_static_array_dword<T, 24, false/*disable_inline_asm*/, true> {
    template<index_t value = 0>
    DEVICE void operator()(static_buffer<T, 24> & vec, number<value> = number<0>{}) {
        static_assert(sizeof(T) == 8);
        asm volatile(
                "v_pk_mov_b32 %0, %24, %24 op_sel:[0, 1]\n" "v_pk_mov_b32 %1, %24, %24 op_sel:[0, 1]\n" "v_pk_mov_b32 %2, %24, %24 op_sel:[0, 1]\n" "v_pk_mov_b32 %3, %24, %24 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %4, %24, %24 op_sel:[0, 1]\n" "v_pk_mov_b32 %5, %24, %24 op_sel:[0, 1]\n" "v_pk_mov_b32 %6, %24, %24 op_sel:[0, 1]\n" "v_pk_mov_b32 %7, %24, %24 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %8, %24, %24 op_sel:[0, 1]\n" "v_pk_mov_b32 %9, %24, %24 op_sel:[0, 1]\n" "v_pk_mov_b32 %10, %24, %24 op_sel:[0, 1]\n" "v_pk_mov_b32 %11, %24, %24 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %12, %24, %24 op_sel:[0, 1]\n" "v_pk_mov_b32 %13, %24, %24 op_sel:[0, 1]\n" "v_pk_mov_b32 %14, %24, %24 op_sel:[0, 1]\n" "v_pk_mov_b32 %15, %24, %24 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %16, %24, %24 op_sel:[0, 1]\n" "v_pk_mov_b32 %17, %24, %24 op_sel:[0, 1]\n" "v_pk_mov_b32 %18, %24, %24 op_sel:[0, 1]\n" "v_pk_mov_b32 %19, %24, %24 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %20, %24, %24 op_sel:[0, 1]\n" "v_pk_mov_b32 %21, %24, %24 op_sel:[0, 1]\n" "v_pk_mov_b32 %22, %24, %24 op_sel:[0, 1]\n" "v_pk_mov_b32 %23, %24, %24 op_sel:[0, 1]\n" 
                :
                "=v"(vec[number<0>{}]), "=v"(vec[number<1>{}]), "=v"(vec[number<2>{}]), "=v"(vec[number<3>{}]), 
                "=v"(vec[number<4>{}]), "=v"(vec[number<5>{}]), "=v"(vec[number<6>{}]), "=v"(vec[number<7>{}]), 
                "=v"(vec[number<8>{}]), "=v"(vec[number<9>{}]), "=v"(vec[number<10>{}]), "=v"(vec[number<11>{}]), 
                "=v"(vec[number<12>{}]), "=v"(vec[number<13>{}]), "=v"(vec[number<14>{}]), "=v"(vec[number<15>{}]), 
                "=v"(vec[number<16>{}]), "=v"(vec[number<17>{}]), "=v"(vec[number<18>{}]), "=v"(vec[number<19>{}]), 
                "=v"(vec[number<20>{}]), "=v"(vec[number<21>{}]), "=v"(vec[number<22>{}]), "=v"(vec[number<23>{}]) 
                : "n"(value) );
    }
};
template <typename T> struct set_static_array_dword<T, 24, false/*disable_inline_asm*/, false> {
    template<index_t value = 0>
    DEVICE void operator()(static_buffer<T, 24> & vec, number<value> = number<0>{}) {
        static_assert(sizeof(T) == 4);
        asm volatile(
                "v_mov_b32 %0, %24\n" "v_mov_b32 %1, %24\n" "v_mov_b32 %2, %24\n" "v_mov_b32 %3, %24\n" 
                "v_mov_b32 %4, %24\n" "v_mov_b32 %5, %24\n" "v_mov_b32 %6, %24\n" "v_mov_b32 %7, %24\n" 
                "v_mov_b32 %8, %24\n" "v_mov_b32 %9, %24\n" "v_mov_b32 %10, %24\n" "v_mov_b32 %11, %24\n" 
                "v_mov_b32 %12, %24\n" "v_mov_b32 %13, %24\n" "v_mov_b32 %14, %24\n" "v_mov_b32 %15, %24\n" 
                "v_mov_b32 %16, %24\n" "v_mov_b32 %17, %24\n" "v_mov_b32 %18, %24\n" "v_mov_b32 %19, %24\n" 
                "v_mov_b32 %20, %24\n" "v_mov_b32 %21, %24\n" "v_mov_b32 %22, %24\n" "v_mov_b32 %23, %24\n" 
                :
                "=v"(vec[number<0>{}]), "=v"(vec[number<1>{}]), "=v"(vec[number<2>{}]), "=v"(vec[number<3>{}]), 
                "=v"(vec[number<4>{}]), "=v"(vec[number<5>{}]), "=v"(vec[number<6>{}]), "=v"(vec[number<7>{}]), 
                "=v"(vec[number<8>{}]), "=v"(vec[number<9>{}]), "=v"(vec[number<10>{}]), "=v"(vec[number<11>{}]), 
                "=v"(vec[number<12>{}]), "=v"(vec[number<13>{}]), "=v"(vec[number<14>{}]), "=v"(vec[number<15>{}]), 
                "=v"(vec[number<16>{}]), "=v"(vec[number<17>{}]), "=v"(vec[number<18>{}]), "=v"(vec[number<19>{}]), 
                "=v"(vec[number<20>{}]), "=v"(vec[number<21>{}]), "=v"(vec[number<22>{}]), "=v"(vec[number<23>{}]) 
                : "n"(value) );
    }
};

template <typename T> struct set_static_array_dword<T, 32, false/*disable_inline_asm*/, true> {
    template<index_t value = 0>
    DEVICE void operator()(static_buffer<T, 32> & vec, number<value> = number<0>{}) {
        static_assert(sizeof(T) == 8);
        asm volatile(
                "v_pk_mov_b32 %0, %32, %32 op_sel:[0, 1]\n" "v_pk_mov_b32 %1, %32, %32 op_sel:[0, 1]\n" "v_pk_mov_b32 %2, %32, %32 op_sel:[0, 1]\n" "v_pk_mov_b32 %3, %32, %32 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %4, %32, %32 op_sel:[0, 1]\n" "v_pk_mov_b32 %5, %32, %32 op_sel:[0, 1]\n" "v_pk_mov_b32 %6, %32, %32 op_sel:[0, 1]\n" "v_pk_mov_b32 %7, %32, %32 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %8, %32, %32 op_sel:[0, 1]\n" "v_pk_mov_b32 %9, %32, %32 op_sel:[0, 1]\n" "v_pk_mov_b32 %10, %32, %32 op_sel:[0, 1]\n" "v_pk_mov_b32 %11, %32, %32 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %12, %32, %32 op_sel:[0, 1]\n" "v_pk_mov_b32 %13, %32, %32 op_sel:[0, 1]\n" "v_pk_mov_b32 %14, %32, %32 op_sel:[0, 1]\n" "v_pk_mov_b32 %15, %32, %32 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %16, %32, %32 op_sel:[0, 1]\n" "v_pk_mov_b32 %17, %32, %32 op_sel:[0, 1]\n" "v_pk_mov_b32 %18, %32, %32 op_sel:[0, 1]\n" "v_pk_mov_b32 %19, %32, %32 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %20, %32, %32 op_sel:[0, 1]\n" "v_pk_mov_b32 %21, %32, %32 op_sel:[0, 1]\n" "v_pk_mov_b32 %22, %32, %32 op_sel:[0, 1]\n" "v_pk_mov_b32 %23, %32, %32 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %24, %32, %32 op_sel:[0, 1]\n" "v_pk_mov_b32 %25, %32, %32 op_sel:[0, 1]\n" "v_pk_mov_b32 %26, %32, %32 op_sel:[0, 1]\n" "v_pk_mov_b32 %27, %32, %32 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %28, %32, %32 op_sel:[0, 1]\n" "v_pk_mov_b32 %29, %32, %32 op_sel:[0, 1]\n" "v_pk_mov_b32 %30, %32, %32 op_sel:[0, 1]\n" "v_pk_mov_b32 %31, %32, %32 op_sel:[0, 1]\n" 
                :
                "=v"(vec[number<0>{}]), "=v"(vec[number<1>{}]), "=v"(vec[number<2>{}]), "=v"(vec[number<3>{}]), 
                "=v"(vec[number<4>{}]), "=v"(vec[number<5>{}]), "=v"(vec[number<6>{}]), "=v"(vec[number<7>{}]), 
                "=v"(vec[number<8>{}]), "=v"(vec[number<9>{}]), "=v"(vec[number<10>{}]), "=v"(vec[number<11>{}]), 
                "=v"(vec[number<12>{}]), "=v"(vec[number<13>{}]), "=v"(vec[number<14>{}]), "=v"(vec[number<15>{}]), 
                "=v"(vec[number<16>{}]), "=v"(vec[number<17>{}]), "=v"(vec[number<18>{}]), "=v"(vec[number<19>{}]), 
                "=v"(vec[number<20>{}]), "=v"(vec[number<21>{}]), "=v"(vec[number<22>{}]), "=v"(vec[number<23>{}]), 
                "=v"(vec[number<24>{}]), "=v"(vec[number<25>{}]), "=v"(vec[number<26>{}]), "=v"(vec[number<27>{}]), 
                "=v"(vec[number<28>{}]), "=v"(vec[number<29>{}]), "=v"(vec[number<30>{}]), "=v"(vec[number<31>{}]) 
                : "n"(value) );
    }
};
template <typename T> struct set_static_array_dword<T, 32, false/*disable_inline_asm*/, false> {
    template<index_t value = 0>
    DEVICE void operator()(static_buffer<T, 32> & vec, number<value> = number<0>{}) {
        static_assert(sizeof(T) == 4);
        asm volatile(
                "v_mov_b32 %0, %32\n" "v_mov_b32 %1, %32\n" "v_mov_b32 %2, %32\n" "v_mov_b32 %3, %32\n" 
                "v_mov_b32 %4, %32\n" "v_mov_b32 %5, %32\n" "v_mov_b32 %6, %32\n" "v_mov_b32 %7, %32\n" 
                "v_mov_b32 %8, %32\n" "v_mov_b32 %9, %32\n" "v_mov_b32 %10, %32\n" "v_mov_b32 %11, %32\n" 
                "v_mov_b32 %12, %32\n" "v_mov_b32 %13, %32\n" "v_mov_b32 %14, %32\n" "v_mov_b32 %15, %32\n" 
                "v_mov_b32 %16, %32\n" "v_mov_b32 %17, %32\n" "v_mov_b32 %18, %32\n" "v_mov_b32 %19, %32\n" 
                "v_mov_b32 %20, %32\n" "v_mov_b32 %21, %32\n" "v_mov_b32 %22, %32\n" "v_mov_b32 %23, %32\n" 
                "v_mov_b32 %24, %32\n" "v_mov_b32 %25, %32\n" "v_mov_b32 %26, %32\n" "v_mov_b32 %27, %32\n" 
                "v_mov_b32 %28, %32\n" "v_mov_b32 %29, %32\n" "v_mov_b32 %30, %32\n" "v_mov_b32 %31, %32\n" 
                :
                "=v"(vec[number<0>{}]), "=v"(vec[number<1>{}]), "=v"(vec[number<2>{}]), "=v"(vec[number<3>{}]), 
                "=v"(vec[number<4>{}]), "=v"(vec[number<5>{}]), "=v"(vec[number<6>{}]), "=v"(vec[number<7>{}]), 
                "=v"(vec[number<8>{}]), "=v"(vec[number<9>{}]), "=v"(vec[number<10>{}]), "=v"(vec[number<11>{}]), 
                "=v"(vec[number<12>{}]), "=v"(vec[number<13>{}]), "=v"(vec[number<14>{}]), "=v"(vec[number<15>{}]), 
                "=v"(vec[number<16>{}]), "=v"(vec[number<17>{}]), "=v"(vec[number<18>{}]), "=v"(vec[number<19>{}]), 
                "=v"(vec[number<20>{}]), "=v"(vec[number<21>{}]), "=v"(vec[number<22>{}]), "=v"(vec[number<23>{}]), 
                "=v"(vec[number<24>{}]), "=v"(vec[number<25>{}]), "=v"(vec[number<26>{}]), "=v"(vec[number<27>{}]), 
                "=v"(vec[number<28>{}]), "=v"(vec[number<29>{}]), "=v"(vec[number<30>{}]), "=v"(vec[number<31>{}]) 
                : "n"(value) );
    }
};

template <typename T> struct set_static_array_dword<T, 48, false/*disable_inline_asm*/, true> {
    template<index_t value = 0>
    DEVICE void operator()(static_buffer<T, 48> & vec, number<value> = number<0>{}) {
        static_assert(sizeof(T) == 8);
        asm volatile(
                "v_pk_mov_b32 %0, %48, %48 op_sel:[0, 1]\n" "v_pk_mov_b32 %1, %48, %48 op_sel:[0, 1]\n" "v_pk_mov_b32 %2, %48, %48 op_sel:[0, 1]\n" "v_pk_mov_b32 %3, %48, %48 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %4, %48, %48 op_sel:[0, 1]\n" "v_pk_mov_b32 %5, %48, %48 op_sel:[0, 1]\n" "v_pk_mov_b32 %6, %48, %48 op_sel:[0, 1]\n" "v_pk_mov_b32 %7, %48, %48 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %8, %48, %48 op_sel:[0, 1]\n" "v_pk_mov_b32 %9, %48, %48 op_sel:[0, 1]\n" "v_pk_mov_b32 %10, %48, %48 op_sel:[0, 1]\n" "v_pk_mov_b32 %11, %48, %48 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %12, %48, %48 op_sel:[0, 1]\n" "v_pk_mov_b32 %13, %48, %48 op_sel:[0, 1]\n" "v_pk_mov_b32 %14, %48, %48 op_sel:[0, 1]\n" "v_pk_mov_b32 %15, %48, %48 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %16, %48, %48 op_sel:[0, 1]\n" "v_pk_mov_b32 %17, %48, %48 op_sel:[0, 1]\n" "v_pk_mov_b32 %18, %48, %48 op_sel:[0, 1]\n" "v_pk_mov_b32 %19, %48, %48 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %20, %48, %48 op_sel:[0, 1]\n" "v_pk_mov_b32 %21, %48, %48 op_sel:[0, 1]\n" "v_pk_mov_b32 %22, %48, %48 op_sel:[0, 1]\n" "v_pk_mov_b32 %23, %48, %48 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %24, %48, %48 op_sel:[0, 1]\n" "v_pk_mov_b32 %25, %48, %48 op_sel:[0, 1]\n" "v_pk_mov_b32 %26, %48, %48 op_sel:[0, 1]\n" "v_pk_mov_b32 %27, %48, %48 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %28, %48, %48 op_sel:[0, 1]\n" "v_pk_mov_b32 %29, %48, %48 op_sel:[0, 1]\n" "v_pk_mov_b32 %30, %48, %48 op_sel:[0, 1]\n" "v_pk_mov_b32 %31, %48, %48 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %32, %48, %48 op_sel:[0, 1]\n" "v_pk_mov_b32 %33, %48, %48 op_sel:[0, 1]\n" "v_pk_mov_b32 %34, %48, %48 op_sel:[0, 1]\n" "v_pk_mov_b32 %35, %48, %48 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %36, %48, %48 op_sel:[0, 1]\n" "v_pk_mov_b32 %37, %48, %48 op_sel:[0, 1]\n" "v_pk_mov_b32 %38, %48, %48 op_sel:[0, 1]\n" "v_pk_mov_b32 %39, %48, %48 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %40, %48, %48 op_sel:[0, 1]\n" "v_pk_mov_b32 %41, %48, %48 op_sel:[0, 1]\n" "v_pk_mov_b32 %42, %48, %48 op_sel:[0, 1]\n" "v_pk_mov_b32 %43, %48, %48 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %44, %48, %48 op_sel:[0, 1]\n" "v_pk_mov_b32 %45, %48, %48 op_sel:[0, 1]\n" "v_pk_mov_b32 %46, %48, %48 op_sel:[0, 1]\n" "v_pk_mov_b32 %47, %48, %48 op_sel:[0, 1]\n" 
                :
                "=v"(vec[number<0>{}]), "=v"(vec[number<1>{}]), "=v"(vec[number<2>{}]), "=v"(vec[number<3>{}]), 
                "=v"(vec[number<4>{}]), "=v"(vec[number<5>{}]), "=v"(vec[number<6>{}]), "=v"(vec[number<7>{}]), 
                "=v"(vec[number<8>{}]), "=v"(vec[number<9>{}]), "=v"(vec[number<10>{}]), "=v"(vec[number<11>{}]), 
                "=v"(vec[number<12>{}]), "=v"(vec[number<13>{}]), "=v"(vec[number<14>{}]), "=v"(vec[number<15>{}]), 
                "=v"(vec[number<16>{}]), "=v"(vec[number<17>{}]), "=v"(vec[number<18>{}]), "=v"(vec[number<19>{}]), 
                "=v"(vec[number<20>{}]), "=v"(vec[number<21>{}]), "=v"(vec[number<22>{}]), "=v"(vec[number<23>{}]), 
                "=v"(vec[number<24>{}]), "=v"(vec[number<25>{}]), "=v"(vec[number<26>{}]), "=v"(vec[number<27>{}]), 
                "=v"(vec[number<28>{}]), "=v"(vec[number<29>{}]), "=v"(vec[number<30>{}]), "=v"(vec[number<31>{}]), 
                "=v"(vec[number<32>{}]), "=v"(vec[number<33>{}]), "=v"(vec[number<34>{}]), "=v"(vec[number<35>{}]), 
                "=v"(vec[number<36>{}]), "=v"(vec[number<37>{}]), "=v"(vec[number<38>{}]), "=v"(vec[number<39>{}]), 
                "=v"(vec[number<40>{}]), "=v"(vec[number<41>{}]), "=v"(vec[number<42>{}]), "=v"(vec[number<43>{}]), 
                "=v"(vec[number<44>{}]), "=v"(vec[number<45>{}]), "=v"(vec[number<46>{}]), "=v"(vec[number<47>{}]) 
                : "n"(value) );
    }
};
template <typename T> struct set_static_array_dword<T, 48, false/*disable_inline_asm*/, false> {
    template<index_t value = 0>
    DEVICE void operator()(static_buffer<T, 48> & vec, number<value> = number<0>{}) {
        static_assert(sizeof(T) == 4);
        asm volatile(
                "v_mov_b32 %0, %48\n" "v_mov_b32 %1, %48\n" "v_mov_b32 %2, %48\n" "v_mov_b32 %3, %48\n" 
                "v_mov_b32 %4, %48\n" "v_mov_b32 %5, %48\n" "v_mov_b32 %6, %48\n" "v_mov_b32 %7, %48\n" 
                "v_mov_b32 %8, %48\n" "v_mov_b32 %9, %48\n" "v_mov_b32 %10, %48\n" "v_mov_b32 %11, %48\n" 
                "v_mov_b32 %12, %48\n" "v_mov_b32 %13, %48\n" "v_mov_b32 %14, %48\n" "v_mov_b32 %15, %48\n" 
                "v_mov_b32 %16, %48\n" "v_mov_b32 %17, %48\n" "v_mov_b32 %18, %48\n" "v_mov_b32 %19, %48\n" 
                "v_mov_b32 %20, %48\n" "v_mov_b32 %21, %48\n" "v_mov_b32 %22, %48\n" "v_mov_b32 %23, %48\n" 
                "v_mov_b32 %24, %48\n" "v_mov_b32 %25, %48\n" "v_mov_b32 %26, %48\n" "v_mov_b32 %27, %48\n" 
                "v_mov_b32 %28, %48\n" "v_mov_b32 %29, %48\n" "v_mov_b32 %30, %48\n" "v_mov_b32 %31, %48\n" 
                "v_mov_b32 %32, %48\n" "v_mov_b32 %33, %48\n" "v_mov_b32 %34, %48\n" "v_mov_b32 %35, %48\n" 
                "v_mov_b32 %36, %48\n" "v_mov_b32 %37, %48\n" "v_mov_b32 %38, %48\n" "v_mov_b32 %39, %48\n" 
                "v_mov_b32 %40, %48\n" "v_mov_b32 %41, %48\n" "v_mov_b32 %42, %48\n" "v_mov_b32 %43, %48\n" 
                "v_mov_b32 %44, %48\n" "v_mov_b32 %45, %48\n" "v_mov_b32 %46, %48\n" "v_mov_b32 %47, %48\n" 
                :
                "=v"(vec[number<0>{}]), "=v"(vec[number<1>{}]), "=v"(vec[number<2>{}]), "=v"(vec[number<3>{}]), 
                "=v"(vec[number<4>{}]), "=v"(vec[number<5>{}]), "=v"(vec[number<6>{}]), "=v"(vec[number<7>{}]), 
                "=v"(vec[number<8>{}]), "=v"(vec[number<9>{}]), "=v"(vec[number<10>{}]), "=v"(vec[number<11>{}]), 
                "=v"(vec[number<12>{}]), "=v"(vec[number<13>{}]), "=v"(vec[number<14>{}]), "=v"(vec[number<15>{}]), 
                "=v"(vec[number<16>{}]), "=v"(vec[number<17>{}]), "=v"(vec[number<18>{}]), "=v"(vec[number<19>{}]), 
                "=v"(vec[number<20>{}]), "=v"(vec[number<21>{}]), "=v"(vec[number<22>{}]), "=v"(vec[number<23>{}]), 
                "=v"(vec[number<24>{}]), "=v"(vec[number<25>{}]), "=v"(vec[number<26>{}]), "=v"(vec[number<27>{}]), 
                "=v"(vec[number<28>{}]), "=v"(vec[number<29>{}]), "=v"(vec[number<30>{}]), "=v"(vec[number<31>{}]), 
                "=v"(vec[number<32>{}]), "=v"(vec[number<33>{}]), "=v"(vec[number<34>{}]), "=v"(vec[number<35>{}]), 
                "=v"(vec[number<36>{}]), "=v"(vec[number<37>{}]), "=v"(vec[number<38>{}]), "=v"(vec[number<39>{}]), 
                "=v"(vec[number<40>{}]), "=v"(vec[number<41>{}]), "=v"(vec[number<42>{}]), "=v"(vec[number<43>{}]), 
                "=v"(vec[number<44>{}]), "=v"(vec[number<45>{}]), "=v"(vec[number<46>{}]), "=v"(vec[number<47>{}]) 
                : "n"(value) );
    }
};

template <typename T> struct set_static_array_dword<T, 64, false/*disable_inline_asm*/, true> {
    template<index_t value = 0>
    DEVICE void operator()(static_buffer<T, 64> & vec, number<value> = number<0>{}) {
        static_assert(sizeof(T) == 8);
        asm volatile(
                "v_pk_mov_b32 %0, %64, %64 op_sel:[0, 1]\n" "v_pk_mov_b32 %1, %64, %64 op_sel:[0, 1]\n" "v_pk_mov_b32 %2, %64, %64 op_sel:[0, 1]\n" "v_pk_mov_b32 %3, %64, %64 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %4, %64, %64 op_sel:[0, 1]\n" "v_pk_mov_b32 %5, %64, %64 op_sel:[0, 1]\n" "v_pk_mov_b32 %6, %64, %64 op_sel:[0, 1]\n" "v_pk_mov_b32 %7, %64, %64 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %8, %64, %64 op_sel:[0, 1]\n" "v_pk_mov_b32 %9, %64, %64 op_sel:[0, 1]\n" "v_pk_mov_b32 %10, %64, %64 op_sel:[0, 1]\n" "v_pk_mov_b32 %11, %64, %64 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %12, %64, %64 op_sel:[0, 1]\n" "v_pk_mov_b32 %13, %64, %64 op_sel:[0, 1]\n" "v_pk_mov_b32 %14, %64, %64 op_sel:[0, 1]\n" "v_pk_mov_b32 %15, %64, %64 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %16, %64, %64 op_sel:[0, 1]\n" "v_pk_mov_b32 %17, %64, %64 op_sel:[0, 1]\n" "v_pk_mov_b32 %18, %64, %64 op_sel:[0, 1]\n" "v_pk_mov_b32 %19, %64, %64 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %20, %64, %64 op_sel:[0, 1]\n" "v_pk_mov_b32 %21, %64, %64 op_sel:[0, 1]\n" "v_pk_mov_b32 %22, %64, %64 op_sel:[0, 1]\n" "v_pk_mov_b32 %23, %64, %64 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %24, %64, %64 op_sel:[0, 1]\n" "v_pk_mov_b32 %25, %64, %64 op_sel:[0, 1]\n" "v_pk_mov_b32 %26, %64, %64 op_sel:[0, 1]\n" "v_pk_mov_b32 %27, %64, %64 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %28, %64, %64 op_sel:[0, 1]\n" "v_pk_mov_b32 %29, %64, %64 op_sel:[0, 1]\n" "v_pk_mov_b32 %30, %64, %64 op_sel:[0, 1]\n" "v_pk_mov_b32 %31, %64, %64 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %32, %64, %64 op_sel:[0, 1]\n" "v_pk_mov_b32 %33, %64, %64 op_sel:[0, 1]\n" "v_pk_mov_b32 %34, %64, %64 op_sel:[0, 1]\n" "v_pk_mov_b32 %35, %64, %64 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %36, %64, %64 op_sel:[0, 1]\n" "v_pk_mov_b32 %37, %64, %64 op_sel:[0, 1]\n" "v_pk_mov_b32 %38, %64, %64 op_sel:[0, 1]\n" "v_pk_mov_b32 %39, %64, %64 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %40, %64, %64 op_sel:[0, 1]\n" "v_pk_mov_b32 %41, %64, %64 op_sel:[0, 1]\n" "v_pk_mov_b32 %42, %64, %64 op_sel:[0, 1]\n" "v_pk_mov_b32 %43, %64, %64 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %44, %64, %64 op_sel:[0, 1]\n" "v_pk_mov_b32 %45, %64, %64 op_sel:[0, 1]\n" "v_pk_mov_b32 %46, %64, %64 op_sel:[0, 1]\n" "v_pk_mov_b32 %47, %64, %64 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %48, %64, %64 op_sel:[0, 1]\n" "v_pk_mov_b32 %49, %64, %64 op_sel:[0, 1]\n" "v_pk_mov_b32 %50, %64, %64 op_sel:[0, 1]\n" "v_pk_mov_b32 %51, %64, %64 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %52, %64, %64 op_sel:[0, 1]\n" "v_pk_mov_b32 %53, %64, %64 op_sel:[0, 1]\n" "v_pk_mov_b32 %54, %64, %64 op_sel:[0, 1]\n" "v_pk_mov_b32 %55, %64, %64 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %56, %64, %64 op_sel:[0, 1]\n" "v_pk_mov_b32 %57, %64, %64 op_sel:[0, 1]\n" "v_pk_mov_b32 %58, %64, %64 op_sel:[0, 1]\n" "v_pk_mov_b32 %59, %64, %64 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %60, %64, %64 op_sel:[0, 1]\n" "v_pk_mov_b32 %61, %64, %64 op_sel:[0, 1]\n" "v_pk_mov_b32 %62, %64, %64 op_sel:[0, 1]\n" "v_pk_mov_b32 %63, %64, %64 op_sel:[0, 1]\n" 
                :
                "=v"(vec[number<0>{}]), "=v"(vec[number<1>{}]), "=v"(vec[number<2>{}]), "=v"(vec[number<3>{}]), 
                "=v"(vec[number<4>{}]), "=v"(vec[number<5>{}]), "=v"(vec[number<6>{}]), "=v"(vec[number<7>{}]), 
                "=v"(vec[number<8>{}]), "=v"(vec[number<9>{}]), "=v"(vec[number<10>{}]), "=v"(vec[number<11>{}]), 
                "=v"(vec[number<12>{}]), "=v"(vec[number<13>{}]), "=v"(vec[number<14>{}]), "=v"(vec[number<15>{}]), 
                "=v"(vec[number<16>{}]), "=v"(vec[number<17>{}]), "=v"(vec[number<18>{}]), "=v"(vec[number<19>{}]), 
                "=v"(vec[number<20>{}]), "=v"(vec[number<21>{}]), "=v"(vec[number<22>{}]), "=v"(vec[number<23>{}]), 
                "=v"(vec[number<24>{}]), "=v"(vec[number<25>{}]), "=v"(vec[number<26>{}]), "=v"(vec[number<27>{}]), 
                "=v"(vec[number<28>{}]), "=v"(vec[number<29>{}]), "=v"(vec[number<30>{}]), "=v"(vec[number<31>{}]), 
                "=v"(vec[number<32>{}]), "=v"(vec[number<33>{}]), "=v"(vec[number<34>{}]), "=v"(vec[number<35>{}]), 
                "=v"(vec[number<36>{}]), "=v"(vec[number<37>{}]), "=v"(vec[number<38>{}]), "=v"(vec[number<39>{}]), 
                "=v"(vec[number<40>{}]), "=v"(vec[number<41>{}]), "=v"(vec[number<42>{}]), "=v"(vec[number<43>{}]), 
                "=v"(vec[number<44>{}]), "=v"(vec[number<45>{}]), "=v"(vec[number<46>{}]), "=v"(vec[number<47>{}]), 
                "=v"(vec[number<48>{}]), "=v"(vec[number<49>{}]), "=v"(vec[number<50>{}]), "=v"(vec[number<51>{}]), 
                "=v"(vec[number<52>{}]), "=v"(vec[number<53>{}]), "=v"(vec[number<54>{}]), "=v"(vec[number<55>{}]), 
                "=v"(vec[number<56>{}]), "=v"(vec[number<57>{}]), "=v"(vec[number<58>{}]), "=v"(vec[number<59>{}]), 
                "=v"(vec[number<60>{}]), "=v"(vec[number<61>{}]), "=v"(vec[number<62>{}]), "=v"(vec[number<63>{}]) 
                : "n"(value) );
    }
};
template <typename T> struct set_static_array_dword<T, 64, false/*disable_inline_asm*/, false> {
    template<index_t value = 0>
    DEVICE void operator()(static_buffer<T, 64> & vec, number<value> = number<0>{}) {
        static_assert(sizeof(T) == 4);
        asm volatile(
                "v_mov_b32 %0, %64\n" "v_mov_b32 %1, %64\n" "v_mov_b32 %2, %64\n" "v_mov_b32 %3, %64\n" 
                "v_mov_b32 %4, %64\n" "v_mov_b32 %5, %64\n" "v_mov_b32 %6, %64\n" "v_mov_b32 %7, %64\n" 
                "v_mov_b32 %8, %64\n" "v_mov_b32 %9, %64\n" "v_mov_b32 %10, %64\n" "v_mov_b32 %11, %64\n" 
                "v_mov_b32 %12, %64\n" "v_mov_b32 %13, %64\n" "v_mov_b32 %14, %64\n" "v_mov_b32 %15, %64\n" 
                "v_mov_b32 %16, %64\n" "v_mov_b32 %17, %64\n" "v_mov_b32 %18, %64\n" "v_mov_b32 %19, %64\n" 
                "v_mov_b32 %20, %64\n" "v_mov_b32 %21, %64\n" "v_mov_b32 %22, %64\n" "v_mov_b32 %23, %64\n" 
                "v_mov_b32 %24, %64\n" "v_mov_b32 %25, %64\n" "v_mov_b32 %26, %64\n" "v_mov_b32 %27, %64\n" 
                "v_mov_b32 %28, %64\n" "v_mov_b32 %29, %64\n" "v_mov_b32 %30, %64\n" "v_mov_b32 %31, %64\n" 
                "v_mov_b32 %32, %64\n" "v_mov_b32 %33, %64\n" "v_mov_b32 %34, %64\n" "v_mov_b32 %35, %64\n" 
                "v_mov_b32 %36, %64\n" "v_mov_b32 %37, %64\n" "v_mov_b32 %38, %64\n" "v_mov_b32 %39, %64\n" 
                "v_mov_b32 %40, %64\n" "v_mov_b32 %41, %64\n" "v_mov_b32 %42, %64\n" "v_mov_b32 %43, %64\n" 
                "v_mov_b32 %44, %64\n" "v_mov_b32 %45, %64\n" "v_mov_b32 %46, %64\n" "v_mov_b32 %47, %64\n" 
                "v_mov_b32 %48, %64\n" "v_mov_b32 %49, %64\n" "v_mov_b32 %50, %64\n" "v_mov_b32 %51, %64\n" 
                "v_mov_b32 %52, %64\n" "v_mov_b32 %53, %64\n" "v_mov_b32 %54, %64\n" "v_mov_b32 %55, %64\n" 
                "v_mov_b32 %56, %64\n" "v_mov_b32 %57, %64\n" "v_mov_b32 %58, %64\n" "v_mov_b32 %59, %64\n" 
                "v_mov_b32 %60, %64\n" "v_mov_b32 %61, %64\n" "v_mov_b32 %62, %64\n" "v_mov_b32 %63, %64\n" 
                :
                "=v"(vec[number<0>{}]), "=v"(vec[number<1>{}]), "=v"(vec[number<2>{}]), "=v"(vec[number<3>{}]), 
                "=v"(vec[number<4>{}]), "=v"(vec[number<5>{}]), "=v"(vec[number<6>{}]), "=v"(vec[number<7>{}]), 
                "=v"(vec[number<8>{}]), "=v"(vec[number<9>{}]), "=v"(vec[number<10>{}]), "=v"(vec[number<11>{}]), 
                "=v"(vec[number<12>{}]), "=v"(vec[number<13>{}]), "=v"(vec[number<14>{}]), "=v"(vec[number<15>{}]), 
                "=v"(vec[number<16>{}]), "=v"(vec[number<17>{}]), "=v"(vec[number<18>{}]), "=v"(vec[number<19>{}]), 
                "=v"(vec[number<20>{}]), "=v"(vec[number<21>{}]), "=v"(vec[number<22>{}]), "=v"(vec[number<23>{}]), 
                "=v"(vec[number<24>{}]), "=v"(vec[number<25>{}]), "=v"(vec[number<26>{}]), "=v"(vec[number<27>{}]), 
                "=v"(vec[number<28>{}]), "=v"(vec[number<29>{}]), "=v"(vec[number<30>{}]), "=v"(vec[number<31>{}]), 
                "=v"(vec[number<32>{}]), "=v"(vec[number<33>{}]), "=v"(vec[number<34>{}]), "=v"(vec[number<35>{}]), 
                "=v"(vec[number<36>{}]), "=v"(vec[number<37>{}]), "=v"(vec[number<38>{}]), "=v"(vec[number<39>{}]), 
                "=v"(vec[number<40>{}]), "=v"(vec[number<41>{}]), "=v"(vec[number<42>{}]), "=v"(vec[number<43>{}]), 
                "=v"(vec[number<44>{}]), "=v"(vec[number<45>{}]), "=v"(vec[number<46>{}]), "=v"(vec[number<47>{}]), 
                "=v"(vec[number<48>{}]), "=v"(vec[number<49>{}]), "=v"(vec[number<50>{}]), "=v"(vec[number<51>{}]), 
                "=v"(vec[number<52>{}]), "=v"(vec[number<53>{}]), "=v"(vec[number<54>{}]), "=v"(vec[number<55>{}]), 
                "=v"(vec[number<56>{}]), "=v"(vec[number<57>{}]), "=v"(vec[number<58>{}]), "=v"(vec[number<59>{}]), 
                "=v"(vec[number<60>{}]), "=v"(vec[number<61>{}]), "=v"(vec[number<62>{}]), "=v"(vec[number<63>{}]) 
                : "n"(value) );
    }
};

template <typename T> struct set_static_array_dword<T, 96, false/*disable_inline_asm*/, true> {
    template<index_t value = 0>
    DEVICE void operator()(static_buffer<T, 96> & vec, number<value> = number<0>{}) {
        static_assert(sizeof(T) == 8);
        asm volatile(
                "v_pk_mov_b32 %0, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %1, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %2, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %3, %96, %96 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %4, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %5, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %6, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %7, %96, %96 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %8, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %9, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %10, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %11, %96, %96 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %12, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %13, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %14, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %15, %96, %96 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %16, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %17, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %18, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %19, %96, %96 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %20, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %21, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %22, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %23, %96, %96 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %24, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %25, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %26, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %27, %96, %96 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %28, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %29, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %30, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %31, %96, %96 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %32, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %33, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %34, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %35, %96, %96 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %36, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %37, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %38, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %39, %96, %96 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %40, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %41, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %42, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %43, %96, %96 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %44, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %45, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %46, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %47, %96, %96 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %48, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %49, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %50, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %51, %96, %96 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %52, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %53, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %54, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %55, %96, %96 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %56, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %57, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %58, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %59, %96, %96 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %60, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %61, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %62, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %63, %96, %96 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %64, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %65, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %66, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %67, %96, %96 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %68, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %69, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %70, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %71, %96, %96 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %72, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %73, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %74, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %75, %96, %96 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %76, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %77, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %78, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %79, %96, %96 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %80, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %81, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %82, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %83, %96, %96 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %84, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %85, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %86, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %87, %96, %96 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %88, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %89, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %90, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %91, %96, %96 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %92, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %93, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %94, %96, %96 op_sel:[0, 1]\n" "v_pk_mov_b32 %95, %96, %96 op_sel:[0, 1]\n" 
                :
                "=v"(vec[number<0>{}]), "=v"(vec[number<1>{}]), "=v"(vec[number<2>{}]), "=v"(vec[number<3>{}]), 
                "=v"(vec[number<4>{}]), "=v"(vec[number<5>{}]), "=v"(vec[number<6>{}]), "=v"(vec[number<7>{}]), 
                "=v"(vec[number<8>{}]), "=v"(vec[number<9>{}]), "=v"(vec[number<10>{}]), "=v"(vec[number<11>{}]), 
                "=v"(vec[number<12>{}]), "=v"(vec[number<13>{}]), "=v"(vec[number<14>{}]), "=v"(vec[number<15>{}]), 
                "=v"(vec[number<16>{}]), "=v"(vec[number<17>{}]), "=v"(vec[number<18>{}]), "=v"(vec[number<19>{}]), 
                "=v"(vec[number<20>{}]), "=v"(vec[number<21>{}]), "=v"(vec[number<22>{}]), "=v"(vec[number<23>{}]), 
                "=v"(vec[number<24>{}]), "=v"(vec[number<25>{}]), "=v"(vec[number<26>{}]), "=v"(vec[number<27>{}]), 
                "=v"(vec[number<28>{}]), "=v"(vec[number<29>{}]), "=v"(vec[number<30>{}]), "=v"(vec[number<31>{}]), 
                "=v"(vec[number<32>{}]), "=v"(vec[number<33>{}]), "=v"(vec[number<34>{}]), "=v"(vec[number<35>{}]), 
                "=v"(vec[number<36>{}]), "=v"(vec[number<37>{}]), "=v"(vec[number<38>{}]), "=v"(vec[number<39>{}]), 
                "=v"(vec[number<40>{}]), "=v"(vec[number<41>{}]), "=v"(vec[number<42>{}]), "=v"(vec[number<43>{}]), 
                "=v"(vec[number<44>{}]), "=v"(vec[number<45>{}]), "=v"(vec[number<46>{}]), "=v"(vec[number<47>{}]), 
                "=v"(vec[number<48>{}]), "=v"(vec[number<49>{}]), "=v"(vec[number<50>{}]), "=v"(vec[number<51>{}]), 
                "=v"(vec[number<52>{}]), "=v"(vec[number<53>{}]), "=v"(vec[number<54>{}]), "=v"(vec[number<55>{}]), 
                "=v"(vec[number<56>{}]), "=v"(vec[number<57>{}]), "=v"(vec[number<58>{}]), "=v"(vec[number<59>{}]), 
                "=v"(vec[number<60>{}]), "=v"(vec[number<61>{}]), "=v"(vec[number<62>{}]), "=v"(vec[number<63>{}]), 
                "=v"(vec[number<64>{}]), "=v"(vec[number<65>{}]), "=v"(vec[number<66>{}]), "=v"(vec[number<67>{}]), 
                "=v"(vec[number<68>{}]), "=v"(vec[number<69>{}]), "=v"(vec[number<70>{}]), "=v"(vec[number<71>{}]), 
                "=v"(vec[number<72>{}]), "=v"(vec[number<73>{}]), "=v"(vec[number<74>{}]), "=v"(vec[number<75>{}]), 
                "=v"(vec[number<76>{}]), "=v"(vec[number<77>{}]), "=v"(vec[number<78>{}]), "=v"(vec[number<79>{}]), 
                "=v"(vec[number<80>{}]), "=v"(vec[number<81>{}]), "=v"(vec[number<82>{}]), "=v"(vec[number<83>{}]), 
                "=v"(vec[number<84>{}]), "=v"(vec[number<85>{}]), "=v"(vec[number<86>{}]), "=v"(vec[number<87>{}]), 
                "=v"(vec[number<88>{}]), "=v"(vec[number<89>{}]), "=v"(vec[number<90>{}]), "=v"(vec[number<91>{}]), 
                "=v"(vec[number<92>{}]), "=v"(vec[number<93>{}]), "=v"(vec[number<94>{}]), "=v"(vec[number<95>{}]) 
                : "n"(value) );
    }
};
template <typename T> struct set_static_array_dword<T, 96, false/*disable_inline_asm*/, false> {
    template<index_t value = 0>
    DEVICE void operator()(static_buffer<T, 96> & vec, number<value> = number<0>{}) {
        static_assert(sizeof(T) == 4);
        asm volatile(
                "v_mov_b32 %0, %96\n" "v_mov_b32 %1, %96\n" "v_mov_b32 %2, %96\n" "v_mov_b32 %3, %96\n" 
                "v_mov_b32 %4, %96\n" "v_mov_b32 %5, %96\n" "v_mov_b32 %6, %96\n" "v_mov_b32 %7, %96\n" 
                "v_mov_b32 %8, %96\n" "v_mov_b32 %9, %96\n" "v_mov_b32 %10, %96\n" "v_mov_b32 %11, %96\n" 
                "v_mov_b32 %12, %96\n" "v_mov_b32 %13, %96\n" "v_mov_b32 %14, %96\n" "v_mov_b32 %15, %96\n" 
                "v_mov_b32 %16, %96\n" "v_mov_b32 %17, %96\n" "v_mov_b32 %18, %96\n" "v_mov_b32 %19, %96\n" 
                "v_mov_b32 %20, %96\n" "v_mov_b32 %21, %96\n" "v_mov_b32 %22, %96\n" "v_mov_b32 %23, %96\n" 
                "v_mov_b32 %24, %96\n" "v_mov_b32 %25, %96\n" "v_mov_b32 %26, %96\n" "v_mov_b32 %27, %96\n" 
                "v_mov_b32 %28, %96\n" "v_mov_b32 %29, %96\n" "v_mov_b32 %30, %96\n" "v_mov_b32 %31, %96\n" 
                "v_mov_b32 %32, %96\n" "v_mov_b32 %33, %96\n" "v_mov_b32 %34, %96\n" "v_mov_b32 %35, %96\n" 
                "v_mov_b32 %36, %96\n" "v_mov_b32 %37, %96\n" "v_mov_b32 %38, %96\n" "v_mov_b32 %39, %96\n" 
                "v_mov_b32 %40, %96\n" "v_mov_b32 %41, %96\n" "v_mov_b32 %42, %96\n" "v_mov_b32 %43, %96\n" 
                "v_mov_b32 %44, %96\n" "v_mov_b32 %45, %96\n" "v_mov_b32 %46, %96\n" "v_mov_b32 %47, %96\n" 
                "v_mov_b32 %48, %96\n" "v_mov_b32 %49, %96\n" "v_mov_b32 %50, %96\n" "v_mov_b32 %51, %96\n" 
                "v_mov_b32 %52, %96\n" "v_mov_b32 %53, %96\n" "v_mov_b32 %54, %96\n" "v_mov_b32 %55, %96\n" 
                "v_mov_b32 %56, %96\n" "v_mov_b32 %57, %96\n" "v_mov_b32 %58, %96\n" "v_mov_b32 %59, %96\n" 
                "v_mov_b32 %60, %96\n" "v_mov_b32 %61, %96\n" "v_mov_b32 %62, %96\n" "v_mov_b32 %63, %96\n" 
                "v_mov_b32 %64, %96\n" "v_mov_b32 %65, %96\n" "v_mov_b32 %66, %96\n" "v_mov_b32 %67, %96\n" 
                "v_mov_b32 %68, %96\n" "v_mov_b32 %69, %96\n" "v_mov_b32 %70, %96\n" "v_mov_b32 %71, %96\n" 
                "v_mov_b32 %72, %96\n" "v_mov_b32 %73, %96\n" "v_mov_b32 %74, %96\n" "v_mov_b32 %75, %96\n" 
                "v_mov_b32 %76, %96\n" "v_mov_b32 %77, %96\n" "v_mov_b32 %78, %96\n" "v_mov_b32 %79, %96\n" 
                "v_mov_b32 %80, %96\n" "v_mov_b32 %81, %96\n" "v_mov_b32 %82, %96\n" "v_mov_b32 %83, %96\n" 
                "v_mov_b32 %84, %96\n" "v_mov_b32 %85, %96\n" "v_mov_b32 %86, %96\n" "v_mov_b32 %87, %96\n" 
                "v_mov_b32 %88, %96\n" "v_mov_b32 %89, %96\n" "v_mov_b32 %90, %96\n" "v_mov_b32 %91, %96\n" 
                "v_mov_b32 %92, %96\n" "v_mov_b32 %93, %96\n" "v_mov_b32 %94, %96\n" "v_mov_b32 %95, %96\n" 
                :
                "=v"(vec[number<0>{}]), "=v"(vec[number<1>{}]), "=v"(vec[number<2>{}]), "=v"(vec[number<3>{}]), 
                "=v"(vec[number<4>{}]), "=v"(vec[number<5>{}]), "=v"(vec[number<6>{}]), "=v"(vec[number<7>{}]), 
                "=v"(vec[number<8>{}]), "=v"(vec[number<9>{}]), "=v"(vec[number<10>{}]), "=v"(vec[number<11>{}]), 
                "=v"(vec[number<12>{}]), "=v"(vec[number<13>{}]), "=v"(vec[number<14>{}]), "=v"(vec[number<15>{}]), 
                "=v"(vec[number<16>{}]), "=v"(vec[number<17>{}]), "=v"(vec[number<18>{}]), "=v"(vec[number<19>{}]), 
                "=v"(vec[number<20>{}]), "=v"(vec[number<21>{}]), "=v"(vec[number<22>{}]), "=v"(vec[number<23>{}]), 
                "=v"(vec[number<24>{}]), "=v"(vec[number<25>{}]), "=v"(vec[number<26>{}]), "=v"(vec[number<27>{}]), 
                "=v"(vec[number<28>{}]), "=v"(vec[number<29>{}]), "=v"(vec[number<30>{}]), "=v"(vec[number<31>{}]), 
                "=v"(vec[number<32>{}]), "=v"(vec[number<33>{}]), "=v"(vec[number<34>{}]), "=v"(vec[number<35>{}]), 
                "=v"(vec[number<36>{}]), "=v"(vec[number<37>{}]), "=v"(vec[number<38>{}]), "=v"(vec[number<39>{}]), 
                "=v"(vec[number<40>{}]), "=v"(vec[number<41>{}]), "=v"(vec[number<42>{}]), "=v"(vec[number<43>{}]), 
                "=v"(vec[number<44>{}]), "=v"(vec[number<45>{}]), "=v"(vec[number<46>{}]), "=v"(vec[number<47>{}]), 
                "=v"(vec[number<48>{}]), "=v"(vec[number<49>{}]), "=v"(vec[number<50>{}]), "=v"(vec[number<51>{}]), 
                "=v"(vec[number<52>{}]), "=v"(vec[number<53>{}]), "=v"(vec[number<54>{}]), "=v"(vec[number<55>{}]), 
                "=v"(vec[number<56>{}]), "=v"(vec[number<57>{}]), "=v"(vec[number<58>{}]), "=v"(vec[number<59>{}]), 
                "=v"(vec[number<60>{}]), "=v"(vec[number<61>{}]), "=v"(vec[number<62>{}]), "=v"(vec[number<63>{}]), 
                "=v"(vec[number<64>{}]), "=v"(vec[number<65>{}]), "=v"(vec[number<66>{}]), "=v"(vec[number<67>{}]), 
                "=v"(vec[number<68>{}]), "=v"(vec[number<69>{}]), "=v"(vec[number<70>{}]), "=v"(vec[number<71>{}]), 
                "=v"(vec[number<72>{}]), "=v"(vec[number<73>{}]), "=v"(vec[number<74>{}]), "=v"(vec[number<75>{}]), 
                "=v"(vec[number<76>{}]), "=v"(vec[number<77>{}]), "=v"(vec[number<78>{}]), "=v"(vec[number<79>{}]), 
                "=v"(vec[number<80>{}]), "=v"(vec[number<81>{}]), "=v"(vec[number<82>{}]), "=v"(vec[number<83>{}]), 
                "=v"(vec[number<84>{}]), "=v"(vec[number<85>{}]), "=v"(vec[number<86>{}]), "=v"(vec[number<87>{}]), 
                "=v"(vec[number<88>{}]), "=v"(vec[number<89>{}]), "=v"(vec[number<90>{}]), "=v"(vec[number<91>{}]), 
                "=v"(vec[number<92>{}]), "=v"(vec[number<93>{}]), "=v"(vec[number<94>{}]), "=v"(vec[number<95>{}]) 
                : "n"(value) );
    }
};

template <typename T> struct set_static_array_dword<T, 128, false/*disable_inline_asm*/, true> {
    template<index_t value = 0>
    DEVICE void operator()(static_buffer<T, 128> & vec, number<value> = number<0>{}) {
        static_assert(sizeof(T) == 8);
        asm volatile(
                "v_pk_mov_b32 %0, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %1, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %2, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %3, %128, %128 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %4, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %5, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %6, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %7, %128, %128 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %8, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %9, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %10, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %11, %128, %128 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %12, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %13, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %14, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %15, %128, %128 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %16, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %17, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %18, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %19, %128, %128 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %20, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %21, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %22, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %23, %128, %128 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %24, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %25, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %26, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %27, %128, %128 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %28, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %29, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %30, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %31, %128, %128 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %32, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %33, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %34, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %35, %128, %128 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %36, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %37, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %38, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %39, %128, %128 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %40, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %41, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %42, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %43, %128, %128 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %44, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %45, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %46, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %47, %128, %128 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %48, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %49, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %50, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %51, %128, %128 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %52, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %53, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %54, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %55, %128, %128 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %56, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %57, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %58, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %59, %128, %128 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %60, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %61, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %62, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %63, %128, %128 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %64, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %65, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %66, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %67, %128, %128 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %68, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %69, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %70, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %71, %128, %128 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %72, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %73, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %74, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %75, %128, %128 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %76, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %77, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %78, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %79, %128, %128 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %80, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %81, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %82, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %83, %128, %128 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %84, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %85, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %86, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %87, %128, %128 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %88, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %89, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %90, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %91, %128, %128 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %92, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %93, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %94, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %95, %128, %128 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %96, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %97, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %98, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %99, %128, %128 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %100, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %101, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %102, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %103, %128, %128 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %104, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %105, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %106, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %107, %128, %128 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %108, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %109, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %110, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %111, %128, %128 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %112, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %113, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %114, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %115, %128, %128 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %116, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %117, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %118, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %119, %128, %128 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %120, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %121, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %122, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %123, %128, %128 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %124, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %125, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %126, %128, %128 op_sel:[0, 1]\n" "v_pk_mov_b32 %127, %128, %128 op_sel:[0, 1]\n" 
                :
                "=v"(vec[number<0>{}]), "=v"(vec[number<1>{}]), "=v"(vec[number<2>{}]), "=v"(vec[number<3>{}]), 
                "=v"(vec[number<4>{}]), "=v"(vec[number<5>{}]), "=v"(vec[number<6>{}]), "=v"(vec[number<7>{}]), 
                "=v"(vec[number<8>{}]), "=v"(vec[number<9>{}]), "=v"(vec[number<10>{}]), "=v"(vec[number<11>{}]), 
                "=v"(vec[number<12>{}]), "=v"(vec[number<13>{}]), "=v"(vec[number<14>{}]), "=v"(vec[number<15>{}]), 
                "=v"(vec[number<16>{}]), "=v"(vec[number<17>{}]), "=v"(vec[number<18>{}]), "=v"(vec[number<19>{}]), 
                "=v"(vec[number<20>{}]), "=v"(vec[number<21>{}]), "=v"(vec[number<22>{}]), "=v"(vec[number<23>{}]), 
                "=v"(vec[number<24>{}]), "=v"(vec[number<25>{}]), "=v"(vec[number<26>{}]), "=v"(vec[number<27>{}]), 
                "=v"(vec[number<28>{}]), "=v"(vec[number<29>{}]), "=v"(vec[number<30>{}]), "=v"(vec[number<31>{}]), 
                "=v"(vec[number<32>{}]), "=v"(vec[number<33>{}]), "=v"(vec[number<34>{}]), "=v"(vec[number<35>{}]), 
                "=v"(vec[number<36>{}]), "=v"(vec[number<37>{}]), "=v"(vec[number<38>{}]), "=v"(vec[number<39>{}]), 
                "=v"(vec[number<40>{}]), "=v"(vec[number<41>{}]), "=v"(vec[number<42>{}]), "=v"(vec[number<43>{}]), 
                "=v"(vec[number<44>{}]), "=v"(vec[number<45>{}]), "=v"(vec[number<46>{}]), "=v"(vec[number<47>{}]), 
                "=v"(vec[number<48>{}]), "=v"(vec[number<49>{}]), "=v"(vec[number<50>{}]), "=v"(vec[number<51>{}]), 
                "=v"(vec[number<52>{}]), "=v"(vec[number<53>{}]), "=v"(vec[number<54>{}]), "=v"(vec[number<55>{}]), 
                "=v"(vec[number<56>{}]), "=v"(vec[number<57>{}]), "=v"(vec[number<58>{}]), "=v"(vec[number<59>{}]), 
                "=v"(vec[number<60>{}]), "=v"(vec[number<61>{}]), "=v"(vec[number<62>{}]), "=v"(vec[number<63>{}]), 
                "=v"(vec[number<64>{}]), "=v"(vec[number<65>{}]), "=v"(vec[number<66>{}]), "=v"(vec[number<67>{}]), 
                "=v"(vec[number<68>{}]), "=v"(vec[number<69>{}]), "=v"(vec[number<70>{}]), "=v"(vec[number<71>{}]), 
                "=v"(vec[number<72>{}]), "=v"(vec[number<73>{}]), "=v"(vec[number<74>{}]), "=v"(vec[number<75>{}]), 
                "=v"(vec[number<76>{}]), "=v"(vec[number<77>{}]), "=v"(vec[number<78>{}]), "=v"(vec[number<79>{}]), 
                "=v"(vec[number<80>{}]), "=v"(vec[number<81>{}]), "=v"(vec[number<82>{}]), "=v"(vec[number<83>{}]), 
                "=v"(vec[number<84>{}]), "=v"(vec[number<85>{}]), "=v"(vec[number<86>{}]), "=v"(vec[number<87>{}]), 
                "=v"(vec[number<88>{}]), "=v"(vec[number<89>{}]), "=v"(vec[number<90>{}]), "=v"(vec[number<91>{}]), 
                "=v"(vec[number<92>{}]), "=v"(vec[number<93>{}]), "=v"(vec[number<94>{}]), "=v"(vec[number<95>{}]), 
                "=v"(vec[number<96>{}]), "=v"(vec[number<97>{}]), "=v"(vec[number<98>{}]), "=v"(vec[number<99>{}]), 
                "=v"(vec[number<100>{}]), "=v"(vec[number<101>{}]), "=v"(vec[number<102>{}]), "=v"(vec[number<103>{}]), 
                "=v"(vec[number<104>{}]), "=v"(vec[number<105>{}]), "=v"(vec[number<106>{}]), "=v"(vec[number<107>{}]), 
                "=v"(vec[number<108>{}]), "=v"(vec[number<109>{}]), "=v"(vec[number<110>{}]), "=v"(vec[number<111>{}]), 
                "=v"(vec[number<112>{}]), "=v"(vec[number<113>{}]), "=v"(vec[number<114>{}]), "=v"(vec[number<115>{}]), 
                "=v"(vec[number<116>{}]), "=v"(vec[number<117>{}]), "=v"(vec[number<118>{}]), "=v"(vec[number<119>{}]), 
                "=v"(vec[number<120>{}]), "=v"(vec[number<121>{}]), "=v"(vec[number<122>{}]), "=v"(vec[number<123>{}]), 
                "=v"(vec[number<124>{}]), "=v"(vec[number<125>{}]), "=v"(vec[number<126>{}]), "=v"(vec[number<127>{}]) 
                : "n"(value) );
    }
};
template <typename T> struct set_static_array_dword<T, 128, false/*disable_inline_asm*/, false> {
    template<index_t value = 0>
    DEVICE void operator()(static_buffer<T, 128> & vec, number<value> = number<0>{}) {
        static_assert(sizeof(T) == 4);
        asm volatile(
                "v_mov_b32 %0, %128\n" "v_mov_b32 %1, %128\n" "v_mov_b32 %2, %128\n" "v_mov_b32 %3, %128\n" 
                "v_mov_b32 %4, %128\n" "v_mov_b32 %5, %128\n" "v_mov_b32 %6, %128\n" "v_mov_b32 %7, %128\n" 
                "v_mov_b32 %8, %128\n" "v_mov_b32 %9, %128\n" "v_mov_b32 %10, %128\n" "v_mov_b32 %11, %128\n" 
                "v_mov_b32 %12, %128\n" "v_mov_b32 %13, %128\n" "v_mov_b32 %14, %128\n" "v_mov_b32 %15, %128\n" 
                "v_mov_b32 %16, %128\n" "v_mov_b32 %17, %128\n" "v_mov_b32 %18, %128\n" "v_mov_b32 %19, %128\n" 
                "v_mov_b32 %20, %128\n" "v_mov_b32 %21, %128\n" "v_mov_b32 %22, %128\n" "v_mov_b32 %23, %128\n" 
                "v_mov_b32 %24, %128\n" "v_mov_b32 %25, %128\n" "v_mov_b32 %26, %128\n" "v_mov_b32 %27, %128\n" 
                "v_mov_b32 %28, %128\n" "v_mov_b32 %29, %128\n" "v_mov_b32 %30, %128\n" "v_mov_b32 %31, %128\n" 
                "v_mov_b32 %32, %128\n" "v_mov_b32 %33, %128\n" "v_mov_b32 %34, %128\n" "v_mov_b32 %35, %128\n" 
                "v_mov_b32 %36, %128\n" "v_mov_b32 %37, %128\n" "v_mov_b32 %38, %128\n" "v_mov_b32 %39, %128\n" 
                "v_mov_b32 %40, %128\n" "v_mov_b32 %41, %128\n" "v_mov_b32 %42, %128\n" "v_mov_b32 %43, %128\n" 
                "v_mov_b32 %44, %128\n" "v_mov_b32 %45, %128\n" "v_mov_b32 %46, %128\n" "v_mov_b32 %47, %128\n" 
                "v_mov_b32 %48, %128\n" "v_mov_b32 %49, %128\n" "v_mov_b32 %50, %128\n" "v_mov_b32 %51, %128\n" 
                "v_mov_b32 %52, %128\n" "v_mov_b32 %53, %128\n" "v_mov_b32 %54, %128\n" "v_mov_b32 %55, %128\n" 
                "v_mov_b32 %56, %128\n" "v_mov_b32 %57, %128\n" "v_mov_b32 %58, %128\n" "v_mov_b32 %59, %128\n" 
                "v_mov_b32 %60, %128\n" "v_mov_b32 %61, %128\n" "v_mov_b32 %62, %128\n" "v_mov_b32 %63, %128\n" 
                "v_mov_b32 %64, %128\n" "v_mov_b32 %65, %128\n" "v_mov_b32 %66, %128\n" "v_mov_b32 %67, %128\n" 
                "v_mov_b32 %68, %128\n" "v_mov_b32 %69, %128\n" "v_mov_b32 %70, %128\n" "v_mov_b32 %71, %128\n" 
                "v_mov_b32 %72, %128\n" "v_mov_b32 %73, %128\n" "v_mov_b32 %74, %128\n" "v_mov_b32 %75, %128\n" 
                "v_mov_b32 %76, %128\n" "v_mov_b32 %77, %128\n" "v_mov_b32 %78, %128\n" "v_mov_b32 %79, %128\n" 
                "v_mov_b32 %80, %128\n" "v_mov_b32 %81, %128\n" "v_mov_b32 %82, %128\n" "v_mov_b32 %83, %128\n" 
                "v_mov_b32 %84, %128\n" "v_mov_b32 %85, %128\n" "v_mov_b32 %86, %128\n" "v_mov_b32 %87, %128\n" 
                "v_mov_b32 %88, %128\n" "v_mov_b32 %89, %128\n" "v_mov_b32 %90, %128\n" "v_mov_b32 %91, %128\n" 
                "v_mov_b32 %92, %128\n" "v_mov_b32 %93, %128\n" "v_mov_b32 %94, %128\n" "v_mov_b32 %95, %128\n" 
                "v_mov_b32 %96, %128\n" "v_mov_b32 %97, %128\n" "v_mov_b32 %98, %128\n" "v_mov_b32 %99, %128\n" 
                "v_mov_b32 %100, %128\n" "v_mov_b32 %101, %128\n" "v_mov_b32 %102, %128\n" "v_mov_b32 %103, %128\n" 
                "v_mov_b32 %104, %128\n" "v_mov_b32 %105, %128\n" "v_mov_b32 %106, %128\n" "v_mov_b32 %107, %128\n" 
                "v_mov_b32 %108, %128\n" "v_mov_b32 %109, %128\n" "v_mov_b32 %110, %128\n" "v_mov_b32 %111, %128\n" 
                "v_mov_b32 %112, %128\n" "v_mov_b32 %113, %128\n" "v_mov_b32 %114, %128\n" "v_mov_b32 %115, %128\n" 
                "v_mov_b32 %116, %128\n" "v_mov_b32 %117, %128\n" "v_mov_b32 %118, %128\n" "v_mov_b32 %119, %128\n" 
                "v_mov_b32 %120, %128\n" "v_mov_b32 %121, %128\n" "v_mov_b32 %122, %128\n" "v_mov_b32 %123, %128\n" 
                "v_mov_b32 %124, %128\n" "v_mov_b32 %125, %128\n" "v_mov_b32 %126, %128\n" "v_mov_b32 %127, %128\n" 
                :
                "=v"(vec[number<0>{}]), "=v"(vec[number<1>{}]), "=v"(vec[number<2>{}]), "=v"(vec[number<3>{}]), 
                "=v"(vec[number<4>{}]), "=v"(vec[number<5>{}]), "=v"(vec[number<6>{}]), "=v"(vec[number<7>{}]), 
                "=v"(vec[number<8>{}]), "=v"(vec[number<9>{}]), "=v"(vec[number<10>{}]), "=v"(vec[number<11>{}]), 
                "=v"(vec[number<12>{}]), "=v"(vec[number<13>{}]), "=v"(vec[number<14>{}]), "=v"(vec[number<15>{}]), 
                "=v"(vec[number<16>{}]), "=v"(vec[number<17>{}]), "=v"(vec[number<18>{}]), "=v"(vec[number<19>{}]), 
                "=v"(vec[number<20>{}]), "=v"(vec[number<21>{}]), "=v"(vec[number<22>{}]), "=v"(vec[number<23>{}]), 
                "=v"(vec[number<24>{}]), "=v"(vec[number<25>{}]), "=v"(vec[number<26>{}]), "=v"(vec[number<27>{}]), 
                "=v"(vec[number<28>{}]), "=v"(vec[number<29>{}]), "=v"(vec[number<30>{}]), "=v"(vec[number<31>{}]), 
                "=v"(vec[number<32>{}]), "=v"(vec[number<33>{}]), "=v"(vec[number<34>{}]), "=v"(vec[number<35>{}]), 
                "=v"(vec[number<36>{}]), "=v"(vec[number<37>{}]), "=v"(vec[number<38>{}]), "=v"(vec[number<39>{}]), 
                "=v"(vec[number<40>{}]), "=v"(vec[number<41>{}]), "=v"(vec[number<42>{}]), "=v"(vec[number<43>{}]), 
                "=v"(vec[number<44>{}]), "=v"(vec[number<45>{}]), "=v"(vec[number<46>{}]), "=v"(vec[number<47>{}]), 
                "=v"(vec[number<48>{}]), "=v"(vec[number<49>{}]), "=v"(vec[number<50>{}]), "=v"(vec[number<51>{}]), 
                "=v"(vec[number<52>{}]), "=v"(vec[number<53>{}]), "=v"(vec[number<54>{}]), "=v"(vec[number<55>{}]), 
                "=v"(vec[number<56>{}]), "=v"(vec[number<57>{}]), "=v"(vec[number<58>{}]), "=v"(vec[number<59>{}]), 
                "=v"(vec[number<60>{}]), "=v"(vec[number<61>{}]), "=v"(vec[number<62>{}]), "=v"(vec[number<63>{}]), 
                "=v"(vec[number<64>{}]), "=v"(vec[number<65>{}]), "=v"(vec[number<66>{}]), "=v"(vec[number<67>{}]), 
                "=v"(vec[number<68>{}]), "=v"(vec[number<69>{}]), "=v"(vec[number<70>{}]), "=v"(vec[number<71>{}]), 
                "=v"(vec[number<72>{}]), "=v"(vec[number<73>{}]), "=v"(vec[number<74>{}]), "=v"(vec[number<75>{}]), 
                "=v"(vec[number<76>{}]), "=v"(vec[number<77>{}]), "=v"(vec[number<78>{}]), "=v"(vec[number<79>{}]), 
                "=v"(vec[number<80>{}]), "=v"(vec[number<81>{}]), "=v"(vec[number<82>{}]), "=v"(vec[number<83>{}]), 
                "=v"(vec[number<84>{}]), "=v"(vec[number<85>{}]), "=v"(vec[number<86>{}]), "=v"(vec[number<87>{}]), 
                "=v"(vec[number<88>{}]), "=v"(vec[number<89>{}]), "=v"(vec[number<90>{}]), "=v"(vec[number<91>{}]), 
                "=v"(vec[number<92>{}]), "=v"(vec[number<93>{}]), "=v"(vec[number<94>{}]), "=v"(vec[number<95>{}]), 
                "=v"(vec[number<96>{}]), "=v"(vec[number<97>{}]), "=v"(vec[number<98>{}]), "=v"(vec[number<99>{}]), 
                "=v"(vec[number<100>{}]), "=v"(vec[number<101>{}]), "=v"(vec[number<102>{}]), "=v"(vec[number<103>{}]), 
                "=v"(vec[number<104>{}]), "=v"(vec[number<105>{}]), "=v"(vec[number<106>{}]), "=v"(vec[number<107>{}]), 
                "=v"(vec[number<108>{}]), "=v"(vec[number<109>{}]), "=v"(vec[number<110>{}]), "=v"(vec[number<111>{}]), 
                "=v"(vec[number<112>{}]), "=v"(vec[number<113>{}]), "=v"(vec[number<114>{}]), "=v"(vec[number<115>{}]), 
                "=v"(vec[number<116>{}]), "=v"(vec[number<117>{}]), "=v"(vec[number<118>{}]), "=v"(vec[number<119>{}]), 
                "=v"(vec[number<120>{}]), "=v"(vec[number<121>{}]), "=v"(vec[number<122>{}]), "=v"(vec[number<123>{}]), 
                "=v"(vec[number<124>{}]), "=v"(vec[number<125>{}]), "=v"(vec[number<126>{}]), "=v"(vec[number<127>{}]) 
                : "n"(value) );
    }
};

template <typename T> struct set_static_array_dword<T, 256, false/*disable_inline_asm*/, true> {
    template<index_t value = 0>
    DEVICE void operator()(static_buffer<T, 256> & vec, number<value> = number<0>{}) {
        static_assert(sizeof(T) == 8);
        asm volatile(
                "v_pk_mov_b32 %0, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %1, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %2, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %3, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %4, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %5, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %6, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %7, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %8, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %9, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %10, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %11, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %12, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %13, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %14, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %15, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %16, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %17, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %18, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %19, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %20, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %21, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %22, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %23, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %24, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %25, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %26, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %27, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %28, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %29, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %30, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %31, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %32, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %33, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %34, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %35, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %36, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %37, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %38, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %39, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %40, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %41, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %42, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %43, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %44, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %45, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %46, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %47, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %48, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %49, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %50, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %51, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %52, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %53, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %54, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %55, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %56, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %57, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %58, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %59, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %60, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %61, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %62, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %63, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %64, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %65, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %66, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %67, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %68, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %69, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %70, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %71, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %72, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %73, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %74, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %75, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %76, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %77, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %78, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %79, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %80, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %81, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %82, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %83, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %84, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %85, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %86, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %87, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %88, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %89, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %90, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %91, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %92, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %93, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %94, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %95, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %96, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %97, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %98, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %99, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %100, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %101, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %102, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %103, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %104, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %105, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %106, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %107, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %108, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %109, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %110, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %111, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %112, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %113, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %114, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %115, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %116, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %117, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %118, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %119, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %120, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %121, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %122, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %123, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %124, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %125, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %126, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %127, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %128, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %129, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %130, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %131, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %132, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %133, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %134, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %135, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %136, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %137, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %138, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %139, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %140, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %141, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %142, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %143, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %144, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %145, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %146, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %147, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %148, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %149, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %150, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %151, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %152, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %153, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %154, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %155, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %156, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %157, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %158, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %159, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %160, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %161, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %162, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %163, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %164, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %165, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %166, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %167, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %168, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %169, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %170, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %171, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %172, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %173, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %174, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %175, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %176, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %177, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %178, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %179, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %180, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %181, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %182, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %183, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %184, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %185, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %186, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %187, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %188, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %189, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %190, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %191, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %192, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %193, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %194, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %195, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %196, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %197, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %198, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %199, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %200, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %201, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %202, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %203, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %204, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %205, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %206, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %207, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %208, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %209, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %210, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %211, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %212, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %213, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %214, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %215, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %216, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %217, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %218, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %219, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %220, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %221, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %222, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %223, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %224, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %225, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %226, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %227, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %228, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %229, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %230, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %231, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %232, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %233, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %234, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %235, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %236, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %237, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %238, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %239, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %240, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %241, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %242, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %243, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %244, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %245, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %246, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %247, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %248, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %249, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %250, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %251, %256, %256 op_sel:[0, 1]\n" 
                "v_pk_mov_b32 %252, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %253, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %254, %256, %256 op_sel:[0, 1]\n" "v_pk_mov_b32 %255, %256, %256 op_sel:[0, 1]\n" 
                :
                "=v"(vec[number<0>{}]), "=v"(vec[number<1>{}]), "=v"(vec[number<2>{}]), "=v"(vec[number<3>{}]), 
                "=v"(vec[number<4>{}]), "=v"(vec[number<5>{}]), "=v"(vec[number<6>{}]), "=v"(vec[number<7>{}]), 
                "=v"(vec[number<8>{}]), "=v"(vec[number<9>{}]), "=v"(vec[number<10>{}]), "=v"(vec[number<11>{}]), 
                "=v"(vec[number<12>{}]), "=v"(vec[number<13>{}]), "=v"(vec[number<14>{}]), "=v"(vec[number<15>{}]), 
                "=v"(vec[number<16>{}]), "=v"(vec[number<17>{}]), "=v"(vec[number<18>{}]), "=v"(vec[number<19>{}]), 
                "=v"(vec[number<20>{}]), "=v"(vec[number<21>{}]), "=v"(vec[number<22>{}]), "=v"(vec[number<23>{}]), 
                "=v"(vec[number<24>{}]), "=v"(vec[number<25>{}]), "=v"(vec[number<26>{}]), "=v"(vec[number<27>{}]), 
                "=v"(vec[number<28>{}]), "=v"(vec[number<29>{}]), "=v"(vec[number<30>{}]), "=v"(vec[number<31>{}]), 
                "=v"(vec[number<32>{}]), "=v"(vec[number<33>{}]), "=v"(vec[number<34>{}]), "=v"(vec[number<35>{}]), 
                "=v"(vec[number<36>{}]), "=v"(vec[number<37>{}]), "=v"(vec[number<38>{}]), "=v"(vec[number<39>{}]), 
                "=v"(vec[number<40>{}]), "=v"(vec[number<41>{}]), "=v"(vec[number<42>{}]), "=v"(vec[number<43>{}]), 
                "=v"(vec[number<44>{}]), "=v"(vec[number<45>{}]), "=v"(vec[number<46>{}]), "=v"(vec[number<47>{}]), 
                "=v"(vec[number<48>{}]), "=v"(vec[number<49>{}]), "=v"(vec[number<50>{}]), "=v"(vec[number<51>{}]), 
                "=v"(vec[number<52>{}]), "=v"(vec[number<53>{}]), "=v"(vec[number<54>{}]), "=v"(vec[number<55>{}]), 
                "=v"(vec[number<56>{}]), "=v"(vec[number<57>{}]), "=v"(vec[number<58>{}]), "=v"(vec[number<59>{}]), 
                "=v"(vec[number<60>{}]), "=v"(vec[number<61>{}]), "=v"(vec[number<62>{}]), "=v"(vec[number<63>{}]), 
                "=v"(vec[number<64>{}]), "=v"(vec[number<65>{}]), "=v"(vec[number<66>{}]), "=v"(vec[number<67>{}]), 
                "=v"(vec[number<68>{}]), "=v"(vec[number<69>{}]), "=v"(vec[number<70>{}]), "=v"(vec[number<71>{}]), 
                "=v"(vec[number<72>{}]), "=v"(vec[number<73>{}]), "=v"(vec[number<74>{}]), "=v"(vec[number<75>{}]), 
                "=v"(vec[number<76>{}]), "=v"(vec[number<77>{}]), "=v"(vec[number<78>{}]), "=v"(vec[number<79>{}]), 
                "=v"(vec[number<80>{}]), "=v"(vec[number<81>{}]), "=v"(vec[number<82>{}]), "=v"(vec[number<83>{}]), 
                "=v"(vec[number<84>{}]), "=v"(vec[number<85>{}]), "=v"(vec[number<86>{}]), "=v"(vec[number<87>{}]), 
                "=v"(vec[number<88>{}]), "=v"(vec[number<89>{}]), "=v"(vec[number<90>{}]), "=v"(vec[number<91>{}]), 
                "=v"(vec[number<92>{}]), "=v"(vec[number<93>{}]), "=v"(vec[number<94>{}]), "=v"(vec[number<95>{}]), 
                "=v"(vec[number<96>{}]), "=v"(vec[number<97>{}]), "=v"(vec[number<98>{}]), "=v"(vec[number<99>{}]), 
                "=v"(vec[number<100>{}]), "=v"(vec[number<101>{}]), "=v"(vec[number<102>{}]), "=v"(vec[number<103>{}]), 
                "=v"(vec[number<104>{}]), "=v"(vec[number<105>{}]), "=v"(vec[number<106>{}]), "=v"(vec[number<107>{}]), 
                "=v"(vec[number<108>{}]), "=v"(vec[number<109>{}]), "=v"(vec[number<110>{}]), "=v"(vec[number<111>{}]), 
                "=v"(vec[number<112>{}]), "=v"(vec[number<113>{}]), "=v"(vec[number<114>{}]), "=v"(vec[number<115>{}]), 
                "=v"(vec[number<116>{}]), "=v"(vec[number<117>{}]), "=v"(vec[number<118>{}]), "=v"(vec[number<119>{}]), 
                "=v"(vec[number<120>{}]), "=v"(vec[number<121>{}]), "=v"(vec[number<122>{}]), "=v"(vec[number<123>{}]), 
                "=v"(vec[number<124>{}]), "=v"(vec[number<125>{}]), "=v"(vec[number<126>{}]), "=v"(vec[number<127>{}]), 
                "=v"(vec[number<128>{}]), "=v"(vec[number<129>{}]), "=v"(vec[number<130>{}]), "=v"(vec[number<131>{}]), 
                "=v"(vec[number<132>{}]), "=v"(vec[number<133>{}]), "=v"(vec[number<134>{}]), "=v"(vec[number<135>{}]), 
                "=v"(vec[number<136>{}]), "=v"(vec[number<137>{}]), "=v"(vec[number<138>{}]), "=v"(vec[number<139>{}]), 
                "=v"(vec[number<140>{}]), "=v"(vec[number<141>{}]), "=v"(vec[number<142>{}]), "=v"(vec[number<143>{}]), 
                "=v"(vec[number<144>{}]), "=v"(vec[number<145>{}]), "=v"(vec[number<146>{}]), "=v"(vec[number<147>{}]), 
                "=v"(vec[number<148>{}]), "=v"(vec[number<149>{}]), "=v"(vec[number<150>{}]), "=v"(vec[number<151>{}]), 
                "=v"(vec[number<152>{}]), "=v"(vec[number<153>{}]), "=v"(vec[number<154>{}]), "=v"(vec[number<155>{}]), 
                "=v"(vec[number<156>{}]), "=v"(vec[number<157>{}]), "=v"(vec[number<158>{}]), "=v"(vec[number<159>{}]), 
                "=v"(vec[number<160>{}]), "=v"(vec[number<161>{}]), "=v"(vec[number<162>{}]), "=v"(vec[number<163>{}]), 
                "=v"(vec[number<164>{}]), "=v"(vec[number<165>{}]), "=v"(vec[number<166>{}]), "=v"(vec[number<167>{}]), 
                "=v"(vec[number<168>{}]), "=v"(vec[number<169>{}]), "=v"(vec[number<170>{}]), "=v"(vec[number<171>{}]), 
                "=v"(vec[number<172>{}]), "=v"(vec[number<173>{}]), "=v"(vec[number<174>{}]), "=v"(vec[number<175>{}]), 
                "=v"(vec[number<176>{}]), "=v"(vec[number<177>{}]), "=v"(vec[number<178>{}]), "=v"(vec[number<179>{}]), 
                "=v"(vec[number<180>{}]), "=v"(vec[number<181>{}]), "=v"(vec[number<182>{}]), "=v"(vec[number<183>{}]), 
                "=v"(vec[number<184>{}]), "=v"(vec[number<185>{}]), "=v"(vec[number<186>{}]), "=v"(vec[number<187>{}]), 
                "=v"(vec[number<188>{}]), "=v"(vec[number<189>{}]), "=v"(vec[number<190>{}]), "=v"(vec[number<191>{}]), 
                "=v"(vec[number<192>{}]), "=v"(vec[number<193>{}]), "=v"(vec[number<194>{}]), "=v"(vec[number<195>{}]), 
                "=v"(vec[number<196>{}]), "=v"(vec[number<197>{}]), "=v"(vec[number<198>{}]), "=v"(vec[number<199>{}]), 
                "=v"(vec[number<200>{}]), "=v"(vec[number<201>{}]), "=v"(vec[number<202>{}]), "=v"(vec[number<203>{}]), 
                "=v"(vec[number<204>{}]), "=v"(vec[number<205>{}]), "=v"(vec[number<206>{}]), "=v"(vec[number<207>{}]), 
                "=v"(vec[number<208>{}]), "=v"(vec[number<209>{}]), "=v"(vec[number<210>{}]), "=v"(vec[number<211>{}]), 
                "=v"(vec[number<212>{}]), "=v"(vec[number<213>{}]), "=v"(vec[number<214>{}]), "=v"(vec[number<215>{}]), 
                "=v"(vec[number<216>{}]), "=v"(vec[number<217>{}]), "=v"(vec[number<218>{}]), "=v"(vec[number<219>{}]), 
                "=v"(vec[number<220>{}]), "=v"(vec[number<221>{}]), "=v"(vec[number<222>{}]), "=v"(vec[number<223>{}]), 
                "=v"(vec[number<224>{}]), "=v"(vec[number<225>{}]), "=v"(vec[number<226>{}]), "=v"(vec[number<227>{}]), 
                "=v"(vec[number<228>{}]), "=v"(vec[number<229>{}]), "=v"(vec[number<230>{}]), "=v"(vec[number<231>{}]), 
                "=v"(vec[number<232>{}]), "=v"(vec[number<233>{}]), "=v"(vec[number<234>{}]), "=v"(vec[number<235>{}]), 
                "=v"(vec[number<236>{}]), "=v"(vec[number<237>{}]), "=v"(vec[number<238>{}]), "=v"(vec[number<239>{}]), 
                "=v"(vec[number<240>{}]), "=v"(vec[number<241>{}]), "=v"(vec[number<242>{}]), "=v"(vec[number<243>{}]), 
                "=v"(vec[number<244>{}]), "=v"(vec[number<245>{}]), "=v"(vec[number<246>{}]), "=v"(vec[number<247>{}]), 
                "=v"(vec[number<248>{}]), "=v"(vec[number<249>{}]), "=v"(vec[number<250>{}]), "=v"(vec[number<251>{}]), 
                "=v"(vec[number<252>{}]), "=v"(vec[number<253>{}]), "=v"(vec[number<254>{}]), "=v"(vec[number<255>{}]) 
                : "n"(value) );
    }
};
template <typename T> struct set_static_array_dword<T, 256, false/*disable_inline_asm*/, false> {
    template<index_t value = 0>
    DEVICE void operator()(static_buffer<T, 256> & vec, number<value> = number<0>{}) {
        static_assert(sizeof(T) == 4);
        asm volatile(
                "v_mov_b32 %0, %256\n" "v_mov_b32 %1, %256\n" "v_mov_b32 %2, %256\n" "v_mov_b32 %3, %256\n" 
                "v_mov_b32 %4, %256\n" "v_mov_b32 %5, %256\n" "v_mov_b32 %6, %256\n" "v_mov_b32 %7, %256\n" 
                "v_mov_b32 %8, %256\n" "v_mov_b32 %9, %256\n" "v_mov_b32 %10, %256\n" "v_mov_b32 %11, %256\n" 
                "v_mov_b32 %12, %256\n" "v_mov_b32 %13, %256\n" "v_mov_b32 %14, %256\n" "v_mov_b32 %15, %256\n" 
                "v_mov_b32 %16, %256\n" "v_mov_b32 %17, %256\n" "v_mov_b32 %18, %256\n" "v_mov_b32 %19, %256\n" 
                "v_mov_b32 %20, %256\n" "v_mov_b32 %21, %256\n" "v_mov_b32 %22, %256\n" "v_mov_b32 %23, %256\n" 
                "v_mov_b32 %24, %256\n" "v_mov_b32 %25, %256\n" "v_mov_b32 %26, %256\n" "v_mov_b32 %27, %256\n" 
                "v_mov_b32 %28, %256\n" "v_mov_b32 %29, %256\n" "v_mov_b32 %30, %256\n" "v_mov_b32 %31, %256\n" 
                "v_mov_b32 %32, %256\n" "v_mov_b32 %33, %256\n" "v_mov_b32 %34, %256\n" "v_mov_b32 %35, %256\n" 
                "v_mov_b32 %36, %256\n" "v_mov_b32 %37, %256\n" "v_mov_b32 %38, %256\n" "v_mov_b32 %39, %256\n" 
                "v_mov_b32 %40, %256\n" "v_mov_b32 %41, %256\n" "v_mov_b32 %42, %256\n" "v_mov_b32 %43, %256\n" 
                "v_mov_b32 %44, %256\n" "v_mov_b32 %45, %256\n" "v_mov_b32 %46, %256\n" "v_mov_b32 %47, %256\n" 
                "v_mov_b32 %48, %256\n" "v_mov_b32 %49, %256\n" "v_mov_b32 %50, %256\n" "v_mov_b32 %51, %256\n" 
                "v_mov_b32 %52, %256\n" "v_mov_b32 %53, %256\n" "v_mov_b32 %54, %256\n" "v_mov_b32 %55, %256\n" 
                "v_mov_b32 %56, %256\n" "v_mov_b32 %57, %256\n" "v_mov_b32 %58, %256\n" "v_mov_b32 %59, %256\n" 
                "v_mov_b32 %60, %256\n" "v_mov_b32 %61, %256\n" "v_mov_b32 %62, %256\n" "v_mov_b32 %63, %256\n" 
                "v_mov_b32 %64, %256\n" "v_mov_b32 %65, %256\n" "v_mov_b32 %66, %256\n" "v_mov_b32 %67, %256\n" 
                "v_mov_b32 %68, %256\n" "v_mov_b32 %69, %256\n" "v_mov_b32 %70, %256\n" "v_mov_b32 %71, %256\n" 
                "v_mov_b32 %72, %256\n" "v_mov_b32 %73, %256\n" "v_mov_b32 %74, %256\n" "v_mov_b32 %75, %256\n" 
                "v_mov_b32 %76, %256\n" "v_mov_b32 %77, %256\n" "v_mov_b32 %78, %256\n" "v_mov_b32 %79, %256\n" 
                "v_mov_b32 %80, %256\n" "v_mov_b32 %81, %256\n" "v_mov_b32 %82, %256\n" "v_mov_b32 %83, %256\n" 
                "v_mov_b32 %84, %256\n" "v_mov_b32 %85, %256\n" "v_mov_b32 %86, %256\n" "v_mov_b32 %87, %256\n" 
                "v_mov_b32 %88, %256\n" "v_mov_b32 %89, %256\n" "v_mov_b32 %90, %256\n" "v_mov_b32 %91, %256\n" 
                "v_mov_b32 %92, %256\n" "v_mov_b32 %93, %256\n" "v_mov_b32 %94, %256\n" "v_mov_b32 %95, %256\n" 
                "v_mov_b32 %96, %256\n" "v_mov_b32 %97, %256\n" "v_mov_b32 %98, %256\n" "v_mov_b32 %99, %256\n" 
                "v_mov_b32 %100, %256\n" "v_mov_b32 %101, %256\n" "v_mov_b32 %102, %256\n" "v_mov_b32 %103, %256\n" 
                "v_mov_b32 %104, %256\n" "v_mov_b32 %105, %256\n" "v_mov_b32 %106, %256\n" "v_mov_b32 %107, %256\n" 
                "v_mov_b32 %108, %256\n" "v_mov_b32 %109, %256\n" "v_mov_b32 %110, %256\n" "v_mov_b32 %111, %256\n" 
                "v_mov_b32 %112, %256\n" "v_mov_b32 %113, %256\n" "v_mov_b32 %114, %256\n" "v_mov_b32 %115, %256\n" 
                "v_mov_b32 %116, %256\n" "v_mov_b32 %117, %256\n" "v_mov_b32 %118, %256\n" "v_mov_b32 %119, %256\n" 
                "v_mov_b32 %120, %256\n" "v_mov_b32 %121, %256\n" "v_mov_b32 %122, %256\n" "v_mov_b32 %123, %256\n" 
                "v_mov_b32 %124, %256\n" "v_mov_b32 %125, %256\n" "v_mov_b32 %126, %256\n" "v_mov_b32 %127, %256\n" 
                "v_mov_b32 %128, %256\n" "v_mov_b32 %129, %256\n" "v_mov_b32 %130, %256\n" "v_mov_b32 %131, %256\n" 
                "v_mov_b32 %132, %256\n" "v_mov_b32 %133, %256\n" "v_mov_b32 %134, %256\n" "v_mov_b32 %135, %256\n" 
                "v_mov_b32 %136, %256\n" "v_mov_b32 %137, %256\n" "v_mov_b32 %138, %256\n" "v_mov_b32 %139, %256\n" 
                "v_mov_b32 %140, %256\n" "v_mov_b32 %141, %256\n" "v_mov_b32 %142, %256\n" "v_mov_b32 %143, %256\n" 
                "v_mov_b32 %144, %256\n" "v_mov_b32 %145, %256\n" "v_mov_b32 %146, %256\n" "v_mov_b32 %147, %256\n" 
                "v_mov_b32 %148, %256\n" "v_mov_b32 %149, %256\n" "v_mov_b32 %150, %256\n" "v_mov_b32 %151, %256\n" 
                "v_mov_b32 %152, %256\n" "v_mov_b32 %153, %256\n" "v_mov_b32 %154, %256\n" "v_mov_b32 %155, %256\n" 
                "v_mov_b32 %156, %256\n" "v_mov_b32 %157, %256\n" "v_mov_b32 %158, %256\n" "v_mov_b32 %159, %256\n" 
                "v_mov_b32 %160, %256\n" "v_mov_b32 %161, %256\n" "v_mov_b32 %162, %256\n" "v_mov_b32 %163, %256\n" 
                "v_mov_b32 %164, %256\n" "v_mov_b32 %165, %256\n" "v_mov_b32 %166, %256\n" "v_mov_b32 %167, %256\n" 
                "v_mov_b32 %168, %256\n" "v_mov_b32 %169, %256\n" "v_mov_b32 %170, %256\n" "v_mov_b32 %171, %256\n" 
                "v_mov_b32 %172, %256\n" "v_mov_b32 %173, %256\n" "v_mov_b32 %174, %256\n" "v_mov_b32 %175, %256\n" 
                "v_mov_b32 %176, %256\n" "v_mov_b32 %177, %256\n" "v_mov_b32 %178, %256\n" "v_mov_b32 %179, %256\n" 
                "v_mov_b32 %180, %256\n" "v_mov_b32 %181, %256\n" "v_mov_b32 %182, %256\n" "v_mov_b32 %183, %256\n" 
                "v_mov_b32 %184, %256\n" "v_mov_b32 %185, %256\n" "v_mov_b32 %186, %256\n" "v_mov_b32 %187, %256\n" 
                "v_mov_b32 %188, %256\n" "v_mov_b32 %189, %256\n" "v_mov_b32 %190, %256\n" "v_mov_b32 %191, %256\n" 
                "v_mov_b32 %192, %256\n" "v_mov_b32 %193, %256\n" "v_mov_b32 %194, %256\n" "v_mov_b32 %195, %256\n" 
                "v_mov_b32 %196, %256\n" "v_mov_b32 %197, %256\n" "v_mov_b32 %198, %256\n" "v_mov_b32 %199, %256\n" 
                "v_mov_b32 %200, %256\n" "v_mov_b32 %201, %256\n" "v_mov_b32 %202, %256\n" "v_mov_b32 %203, %256\n" 
                "v_mov_b32 %204, %256\n" "v_mov_b32 %205, %256\n" "v_mov_b32 %206, %256\n" "v_mov_b32 %207, %256\n" 
                "v_mov_b32 %208, %256\n" "v_mov_b32 %209, %256\n" "v_mov_b32 %210, %256\n" "v_mov_b32 %211, %256\n" 
                "v_mov_b32 %212, %256\n" "v_mov_b32 %213, %256\n" "v_mov_b32 %214, %256\n" "v_mov_b32 %215, %256\n" 
                "v_mov_b32 %216, %256\n" "v_mov_b32 %217, %256\n" "v_mov_b32 %218, %256\n" "v_mov_b32 %219, %256\n" 
                "v_mov_b32 %220, %256\n" "v_mov_b32 %221, %256\n" "v_mov_b32 %222, %256\n" "v_mov_b32 %223, %256\n" 
                "v_mov_b32 %224, %256\n" "v_mov_b32 %225, %256\n" "v_mov_b32 %226, %256\n" "v_mov_b32 %227, %256\n" 
                "v_mov_b32 %228, %256\n" "v_mov_b32 %229, %256\n" "v_mov_b32 %230, %256\n" "v_mov_b32 %231, %256\n" 
                "v_mov_b32 %232, %256\n" "v_mov_b32 %233, %256\n" "v_mov_b32 %234, %256\n" "v_mov_b32 %235, %256\n" 
                "v_mov_b32 %236, %256\n" "v_mov_b32 %237, %256\n" "v_mov_b32 %238, %256\n" "v_mov_b32 %239, %256\n" 
                "v_mov_b32 %240, %256\n" "v_mov_b32 %241, %256\n" "v_mov_b32 %242, %256\n" "v_mov_b32 %243, %256\n" 
                "v_mov_b32 %244, %256\n" "v_mov_b32 %245, %256\n" "v_mov_b32 %246, %256\n" "v_mov_b32 %247, %256\n" 
                "v_mov_b32 %248, %256\n" "v_mov_b32 %249, %256\n" "v_mov_b32 %250, %256\n" "v_mov_b32 %251, %256\n" 
                "v_mov_b32 %252, %256\n" "v_mov_b32 %253, %256\n" "v_mov_b32 %254, %256\n" "v_mov_b32 %255, %256\n" 
                :
                "=v"(vec[number<0>{}]), "=v"(vec[number<1>{}]), "=v"(vec[number<2>{}]), "=v"(vec[number<3>{}]), 
                "=v"(vec[number<4>{}]), "=v"(vec[number<5>{}]), "=v"(vec[number<6>{}]), "=v"(vec[number<7>{}]), 
                "=v"(vec[number<8>{}]), "=v"(vec[number<9>{}]), "=v"(vec[number<10>{}]), "=v"(vec[number<11>{}]), 
                "=v"(vec[number<12>{}]), "=v"(vec[number<13>{}]), "=v"(vec[number<14>{}]), "=v"(vec[number<15>{}]), 
                "=v"(vec[number<16>{}]), "=v"(vec[number<17>{}]), "=v"(vec[number<18>{}]), "=v"(vec[number<19>{}]), 
                "=v"(vec[number<20>{}]), "=v"(vec[number<21>{}]), "=v"(vec[number<22>{}]), "=v"(vec[number<23>{}]), 
                "=v"(vec[number<24>{}]), "=v"(vec[number<25>{}]), "=v"(vec[number<26>{}]), "=v"(vec[number<27>{}]), 
                "=v"(vec[number<28>{}]), "=v"(vec[number<29>{}]), "=v"(vec[number<30>{}]), "=v"(vec[number<31>{}]), 
                "=v"(vec[number<32>{}]), "=v"(vec[number<33>{}]), "=v"(vec[number<34>{}]), "=v"(vec[number<35>{}]), 
                "=v"(vec[number<36>{}]), "=v"(vec[number<37>{}]), "=v"(vec[number<38>{}]), "=v"(vec[number<39>{}]), 
                "=v"(vec[number<40>{}]), "=v"(vec[number<41>{}]), "=v"(vec[number<42>{}]), "=v"(vec[number<43>{}]), 
                "=v"(vec[number<44>{}]), "=v"(vec[number<45>{}]), "=v"(vec[number<46>{}]), "=v"(vec[number<47>{}]), 
                "=v"(vec[number<48>{}]), "=v"(vec[number<49>{}]), "=v"(vec[number<50>{}]), "=v"(vec[number<51>{}]), 
                "=v"(vec[number<52>{}]), "=v"(vec[number<53>{}]), "=v"(vec[number<54>{}]), "=v"(vec[number<55>{}]), 
                "=v"(vec[number<56>{}]), "=v"(vec[number<57>{}]), "=v"(vec[number<58>{}]), "=v"(vec[number<59>{}]), 
                "=v"(vec[number<60>{}]), "=v"(vec[number<61>{}]), "=v"(vec[number<62>{}]), "=v"(vec[number<63>{}]), 
                "=v"(vec[number<64>{}]), "=v"(vec[number<65>{}]), "=v"(vec[number<66>{}]), "=v"(vec[number<67>{}]), 
                "=v"(vec[number<68>{}]), "=v"(vec[number<69>{}]), "=v"(vec[number<70>{}]), "=v"(vec[number<71>{}]), 
                "=v"(vec[number<72>{}]), "=v"(vec[number<73>{}]), "=v"(vec[number<74>{}]), "=v"(vec[number<75>{}]), 
                "=v"(vec[number<76>{}]), "=v"(vec[number<77>{}]), "=v"(vec[number<78>{}]), "=v"(vec[number<79>{}]), 
                "=v"(vec[number<80>{}]), "=v"(vec[number<81>{}]), "=v"(vec[number<82>{}]), "=v"(vec[number<83>{}]), 
                "=v"(vec[number<84>{}]), "=v"(vec[number<85>{}]), "=v"(vec[number<86>{}]), "=v"(vec[number<87>{}]), 
                "=v"(vec[number<88>{}]), "=v"(vec[number<89>{}]), "=v"(vec[number<90>{}]), "=v"(vec[number<91>{}]), 
                "=v"(vec[number<92>{}]), "=v"(vec[number<93>{}]), "=v"(vec[number<94>{}]), "=v"(vec[number<95>{}]), 
                "=v"(vec[number<96>{}]), "=v"(vec[number<97>{}]), "=v"(vec[number<98>{}]), "=v"(vec[number<99>{}]), 
                "=v"(vec[number<100>{}]), "=v"(vec[number<101>{}]), "=v"(vec[number<102>{}]), "=v"(vec[number<103>{}]), 
                "=v"(vec[number<104>{}]), "=v"(vec[number<105>{}]), "=v"(vec[number<106>{}]), "=v"(vec[number<107>{}]), 
                "=v"(vec[number<108>{}]), "=v"(vec[number<109>{}]), "=v"(vec[number<110>{}]), "=v"(vec[number<111>{}]), 
                "=v"(vec[number<112>{}]), "=v"(vec[number<113>{}]), "=v"(vec[number<114>{}]), "=v"(vec[number<115>{}]), 
                "=v"(vec[number<116>{}]), "=v"(vec[number<117>{}]), "=v"(vec[number<118>{}]), "=v"(vec[number<119>{}]), 
                "=v"(vec[number<120>{}]), "=v"(vec[number<121>{}]), "=v"(vec[number<122>{}]), "=v"(vec[number<123>{}]), 
                "=v"(vec[number<124>{}]), "=v"(vec[number<125>{}]), "=v"(vec[number<126>{}]), "=v"(vec[number<127>{}]), 
                "=v"(vec[number<128>{}]), "=v"(vec[number<129>{}]), "=v"(vec[number<130>{}]), "=v"(vec[number<131>{}]), 
                "=v"(vec[number<132>{}]), "=v"(vec[number<133>{}]), "=v"(vec[number<134>{}]), "=v"(vec[number<135>{}]), 
                "=v"(vec[number<136>{}]), "=v"(vec[number<137>{}]), "=v"(vec[number<138>{}]), "=v"(vec[number<139>{}]), 
                "=v"(vec[number<140>{}]), "=v"(vec[number<141>{}]), "=v"(vec[number<142>{}]), "=v"(vec[number<143>{}]), 
                "=v"(vec[number<144>{}]), "=v"(vec[number<145>{}]), "=v"(vec[number<146>{}]), "=v"(vec[number<147>{}]), 
                "=v"(vec[number<148>{}]), "=v"(vec[number<149>{}]), "=v"(vec[number<150>{}]), "=v"(vec[number<151>{}]), 
                "=v"(vec[number<152>{}]), "=v"(vec[number<153>{}]), "=v"(vec[number<154>{}]), "=v"(vec[number<155>{}]), 
                "=v"(vec[number<156>{}]), "=v"(vec[number<157>{}]), "=v"(vec[number<158>{}]), "=v"(vec[number<159>{}]), 
                "=v"(vec[number<160>{}]), "=v"(vec[number<161>{}]), "=v"(vec[number<162>{}]), "=v"(vec[number<163>{}]), 
                "=v"(vec[number<164>{}]), "=v"(vec[number<165>{}]), "=v"(vec[number<166>{}]), "=v"(vec[number<167>{}]), 
                "=v"(vec[number<168>{}]), "=v"(vec[number<169>{}]), "=v"(vec[number<170>{}]), "=v"(vec[number<171>{}]), 
                "=v"(vec[number<172>{}]), "=v"(vec[number<173>{}]), "=v"(vec[number<174>{}]), "=v"(vec[number<175>{}]), 
                "=v"(vec[number<176>{}]), "=v"(vec[number<177>{}]), "=v"(vec[number<178>{}]), "=v"(vec[number<179>{}]), 
                "=v"(vec[number<180>{}]), "=v"(vec[number<181>{}]), "=v"(vec[number<182>{}]), "=v"(vec[number<183>{}]), 
                "=v"(vec[number<184>{}]), "=v"(vec[number<185>{}]), "=v"(vec[number<186>{}]), "=v"(vec[number<187>{}]), 
                "=v"(vec[number<188>{}]), "=v"(vec[number<189>{}]), "=v"(vec[number<190>{}]), "=v"(vec[number<191>{}]), 
                "=v"(vec[number<192>{}]), "=v"(vec[number<193>{}]), "=v"(vec[number<194>{}]), "=v"(vec[number<195>{}]), 
                "=v"(vec[number<196>{}]), "=v"(vec[number<197>{}]), "=v"(vec[number<198>{}]), "=v"(vec[number<199>{}]), 
                "=v"(vec[number<200>{}]), "=v"(vec[number<201>{}]), "=v"(vec[number<202>{}]), "=v"(vec[number<203>{}]), 
                "=v"(vec[number<204>{}]), "=v"(vec[number<205>{}]), "=v"(vec[number<206>{}]), "=v"(vec[number<207>{}]), 
                "=v"(vec[number<208>{}]), "=v"(vec[number<209>{}]), "=v"(vec[number<210>{}]), "=v"(vec[number<211>{}]), 
                "=v"(vec[number<212>{}]), "=v"(vec[number<213>{}]), "=v"(vec[number<214>{}]), "=v"(vec[number<215>{}]), 
                "=v"(vec[number<216>{}]), "=v"(vec[number<217>{}]), "=v"(vec[number<218>{}]), "=v"(vec[number<219>{}]), 
                "=v"(vec[number<220>{}]), "=v"(vec[number<221>{}]), "=v"(vec[number<222>{}]), "=v"(vec[number<223>{}]), 
                "=v"(vec[number<224>{}]), "=v"(vec[number<225>{}]), "=v"(vec[number<226>{}]), "=v"(vec[number<227>{}]), 
                "=v"(vec[number<228>{}]), "=v"(vec[number<229>{}]), "=v"(vec[number<230>{}]), "=v"(vec[number<231>{}]), 
                "=v"(vec[number<232>{}]), "=v"(vec[number<233>{}]), "=v"(vec[number<234>{}]), "=v"(vec[number<235>{}]), 
                "=v"(vec[number<236>{}]), "=v"(vec[number<237>{}]), "=v"(vec[number<238>{}]), "=v"(vec[number<239>{}]), 
                "=v"(vec[number<240>{}]), "=v"(vec[number<241>{}]), "=v"(vec[number<242>{}]), "=v"(vec[number<243>{}]), 
                "=v"(vec[number<244>{}]), "=v"(vec[number<245>{}]), "=v"(vec[number<246>{}]), "=v"(vec[number<247>{}]), 
                "=v"(vec[number<248>{}]), "=v"(vec[number<249>{}]), "=v"(vec[number<250>{}]), "=v"(vec[number<251>{}]), 
                "=v"(vec[number<252>{}]), "=v"(vec[number<253>{}]), "=v"(vec[number<254>{}]), "=v"(vec[number<255>{}]) 
                : "n"(value) );
    }
};

// clang-format on
// generated by gen_set_buf.py
template <typename T, index_t N, bool disable_inline_asm = false, index_t SET_BY_DWORD = (sizeof(T) * N % 8 == 0 && sizeof(T) <= 8) ? 2 : ((sizeof(T) * N % 4 == 0 && sizeof(T) <= 4) ? 1 : 0)>
struct set_buf;
template <typename T, index_t N, bool disable_inline_asm>
struct set_buf<T, N, disable_inline_asm, 0> {
    template<index_t value = 0>
    DEVICE void operator()(vector_type<T, N> & vec, number<value> = number<0>{}) {
        constexpr_for<0, N, 1>{}([&](auto i){
            vec.template to_varray<T>()[i] = static_cast<T>(value);
        });
    }
};
template <typename T, index_t N, bool disable_inline_asm>
struct set_buf<T, N, disable_inline_asm, 1> {
    template<index_t value = 0>
    DEVICE void operator()(vector_type<T, N> & vec, number<value> = number<0>{}) {
        using dword_t = typename vector_type<T, 4 / sizeof(T)>::type;
        set_static_array_dword<dword_t, N * sizeof(T) / 4, disable_inline_asm>{}(vec.template to_varray<dword_t>(), number<value>{});
    }
};
template <typename T, index_t N, bool disable_inline_asm>
struct set_buf<T, N, disable_inline_asm, 2> {
    template<index_t value = 0>
    DEVICE void operator()(vector_type<T, N> & vec, number<value> = number<0>{}) {
        using dword_t = typename vector_type<T, 8 / sizeof(T)>::type;
        set_static_array_dword<dword_t, N * sizeof(T) / 8, disable_inline_asm>{}(vec.template to_varray<dword_t>(), number<value>{});
    }
};

