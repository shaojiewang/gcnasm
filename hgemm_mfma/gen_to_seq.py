import sys
import os
import itertools
import numpy as np
import enum

OUTPUT_FILE = 'to_seq_predef.hpp'
TOTAL_N = 73

def gen(file_name, total_n = TOTAL_N):
    fp = None
    try:
        fp = open(file_name, "w")
    except IOError as e:
        print("can't open file:{}({})".format(file_name, e))
        sys.exit()
    fp.write(f'// generated by {sys.argv[0]}\n')
    fp.write(f'#define TO_SEQ(a_) [a_] {{ \\\n')
    fp.write(f'    static_assert(a_.n_element <= {total_n});  \\\n')
    for n in range(total_n):
        if n == 0:
            fp.write(f'    if constexpr(a_.n_element == 0) {{ return seq<>{{}}; }}\\\n')
        else:
            fp.write(f'    else if constexpr(a_.n_element == {n}) {{ return seq<')
            for i_n in range(n):
                fp.write(f'a_[{i_n}]')
                if i_n != n - 1:
                    fp.write(', ')
                if (i_n + 1) % 8 == 0 and (i_n + 1) != n:
                    fp.write('\\\n                                             ')
            fp.write(f'>{{}}; }}   \\\n')
    fp.write(f'}}()')

if __name__ == '__main__':
    output_file = OUTPUT_FILE
    if len(sys.argv) >= 2:
        output_file = sys.argv[1]
    gen(output_file)
